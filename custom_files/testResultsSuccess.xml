<?xml version="1.0" encoding="utf-8"?>
<test-results name="Test results" errors="0" inconclusive="0" ignored="0" invalid="0" not-run="0" date="2018-01-19" time="10:22:15" total="1591" skipped="7">
  <environment os-version="unknown" platform="unknown" cwd="unknown" machine-name="unknown" user="unknown" user-domain="unknown" nunit-version="xUnit.net 99.99.99.0" clr-version="64-bit .NET Standard [collection-per-class, non-parallel]" />
  <culture-info current-culture="unknown" current-uiculture="unknown" />
  <test-suite type="Assemblies" name="xUnit.net Tests" executed="True" success="True" result="Success" time="236.173">
    <results>
      <test-suite type="Assembly" executed="True" name="FastTests.dll" result="Success" success="True" time="236.173">
        <results>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonWriterTests.ConcurrentAccessTests" result="Success" success="True" time="0.956">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ConcurrentAccessTests.ConcurrentReadsTest" executed="True" result="Success" success="True" time="0.9560174" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RDBC_78" result="Success" success="True" time="10.260">
            <results>
              <test-case name="FastTests.Issues.RDBC_78.CanQueryNestedClass" executed="True" result="Success" success="True" time="10.2604647" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8075" result="Success" success="True" time="0.272">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8075.Should_match_auto_map_reduce_index_if_analyzed_field_isnt_used_in_where" executed="True" result="Success" success="True" time="0.1896005" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8075.Should_match_auto_map_index_if_analyzed_field_isnt_used_in_where" executed="True" result="Success" success="True" time="0.0824866" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueryDateTime" result="Success" success="True" time="0.805">
            <results>
              <test-case name="FastTests.Client.QueryDateTime.StaticQueryingDateTimeShouldWork" executed="True" result="Success" success="True" time="0.3720578" />
              <test-case name="FastTests.Client.QueryDateTime.DynamicQueryingDateTimeShouldWork" executed="True" result="Success" success="True" time="0.433286" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.Crud" result="Success" success="True" time="0.217">
            <results>
              <test-case name="FastTests.Server.Basic.Crud.CanSaveAndLoad" executed="True" result="Success" success="True" time="0.1226793" />
              <test-case name="FastTests.Server.Basic.Crud.CanOverwriteDocumentWithSmallerValue" executed="True" result="Success" success="True" time="0.0947126" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6960" result="Success" success="True" time="0.001">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6960.EnableDebuggingMustBeSetToFalseForSecurityReasons" executed="True" result="Success" success="True" time="0.0007343" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Backups.Full" result="Success" success="True" time="0.195">
            <results>
              <test-case name="FastTests.Voron.Backups.Full.CanBackupAndRestoreSmall" executed="True" result="Success" success="True" time="0.1949845" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.WaitingForNonStaleResults" result="Success" success="True" time="0.432">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.WaitingForNonStaleResults.As_of_now_usage" executed="True" result="Success" success="True" time="0.1719363" />
              <test-case name="FastTests.Server.Documents.Queries.WaitingForNonStaleResults.Throws_if_exceeds_timeout" executed="True" result="Success" success="True" time="0.1254453" />
              <test-case name="FastTests.Server.Documents.Queries.WaitingForNonStaleResults.Cutoff_etag_usage" executed="True" result="Success" success="True" time="0.134858" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition" result="Success" success="True" time="0.011">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition.Can_be_no_aggregation_field_in_dynamic_group_by" executed="True" result="Success" success="True" time="0.0002395" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition.Error_when_no_group_by_field" executed="True" result="Success" success="True" time="0.0017561" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition.Map_all_fields" executed="True" result="Success" success="True" time="0.0005761" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition.Extends_mapping_based_on_existing_definition_if_group_by_fields_match" executed="True" result="Success" success="True" time="0.0069173" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.CreationOfAutoMapReduceIndexDefinition.SpecifyingInvalidParametersWillResultInException" executed="True" result="Success" success="True" time="0.0015709" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.BasicAnalyzers" result="Success" success="True" time="0.011">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.BasicAnalyzers.CheckAnalyzers" executed="True" result="Success" success="True" time="0.011222" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests" result="Success" success="True" time="0.037">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_string_value" executed="True" result="Success" success="True" time="0.0056125" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Reuses_cached_document_instance" executed="True" result="Success" success="True" time="0.0017255" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_numeric_fields" executed="True" result="Success" success="True" time="0.0036871" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Returns_empty_string_value_if_property_has_empty_string" executed="True" result="Success" success="True" time="0.0011364" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_string_value_nested_inside_collection" executed="True" result="Success" success="True" time="0.0091714" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_complex_value" executed="True" result="Success" success="True" time="0.0034136" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_string_value_nested_inside_double_nested_collections" executed="True" result="Success" success="True" time="0.0023024" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Returns_null_value_if_property_is_null" executed="True" result="Success" success="True" time="0.0012347" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_nested_string_value" executed="True" result="Success" success="True" time="0.0010144" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_array_having_complex_values" executed="True" result="Success" success="True" time="0.0065936" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LuceneDocumentConverterTests.Conversion_of_array_value" executed="True" result="Success" success="True" time="0.0013357" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries" result="Success" success="True" time="1.152">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Failure_if_there_is_no_index" executed="True" result="Success" success="True" time="0.0504935" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_for_index_containing_all_fields" executed="True" result="Success" success="True" time="0.098112" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Failure_if_matching_index_is_disabled_errored_or_has_lot_of_errors" executed="True" result="Success" success="True" time="0.0863937" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_for_single_matching_index_with_mapping_nested_fields" executed="True" result="Success" success="True" time="0.0888753" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_query_sort_is_default_and_definition_doesn_not_specify_sorting_at_all" executed="True" result="Success" success="True" time="0.091458" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.PartialMatch_for_index_containing_only_part_of_indexes_fields" executed="True" result="Success" success="True" time="0.0676635" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_for_single_matching_index_with_numeric_sort_option_for_nested_field" executed="True" result="Success" success="True" time="0.079959" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Failure_if_there_is_no_index_for_given_collection" executed="True" result="Success" success="True" time="0.0672969" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Partial_match_when_sort_field_is_not_mapped" executed="True" result="Success" success="True" time="0.0778822" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_for_single_matching_index" executed="True" result="Success" success="True" time="0.0731032" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Partial_match_if_analyzer_is_required" executed="True" result="Success" success="True" time="0.1353025" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Complete_match_for_single_matching_index_with_default_string_sort_option" executed="True" result="Success" success="True" time="0.0784277" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.MatchingAutoMapIndexesForDynamicQueries.Partial_match_if_exact_is_required" executed="True" result="Success" success="True" time="0.1573456" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Events" result="Success" success="True" time="0.098">
            <results>
              <test-case name="FastTests.Client.Events.Before_Store_Listerner" executed="True" result="Success" success="True" time="0.0978615" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_8814" result="Success" success="True" time="0.613">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8814.ShouldSupportProjectionAndFilter" executed="True" result="Success" success="True" time="0.6125768" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.MultiValueTree" result="Success" success="True" time="0.482">
            <results>
              <test-case name="FastTests.Voron.MultiValueTree.Multiple_MultiAdd_And_MultiDelete_InTheSame_Transaction_EntryDeleted" executed="True" result="Success" success="True" time="0.1020108" />
              <test-case name="FastTests.Voron.MultiValueTree.MultiAdd_Twice_TheSame_KeyValue_MultiDelete_NotThrowsException_MultiTree_Deleted" executed="True" result="Success" success="True" time="0.0427861" />
              <test-case name="FastTests.Voron.MultiValueTree.NamedTree_Multiple_MultiAdd_MultiDelete_Once_And_Read_EntryDeleted" executed="True" result="Success" success="True" time="0.0400037" />
              <test-case name="FastTests.Voron.MultiValueTree.MultiDelete_Remains_One_Entry_The_Data_Is_Retrieved_With_MultiRead" executed="True" result="Success" success="True" time="0.0448072" />
              <test-case name="FastTests.Voron.MultiValueTree.Single_MultiAdd_And_Single_MultiDelete_DataDeleted" executed="True" result="Success" success="True" time="0.0411004" />
              <test-case name="FastTests.Voron.MultiValueTree.Multiple_MultiAdd_MultiDelete_Once_And_Read_EntryDeleted" executed="True" result="Success" success="True" time="0.039852" />
              <test-case name="FastTests.Voron.MultiValueTree.Single_MultiAdd_And_Read_DataStored" executed="True" result="Success" success="True" time="0.0405603" />
              <test-case name="FastTests.Voron.MultiValueTree.Multiple_MultiAdd_And_Read_DataStored" executed="True" result="Success" success="True" time="0.0391806" />
              <test-case name="FastTests.Voron.MultiValueTree.MultiDelete_Remains_No_Entries_ChildTreeKey_Doesnt_Exist" executed="True" result="Success" success="True" time="0.039669" />
              <test-case name="FastTests.Voron.MultiValueTree.NamedTree_Multiple_MultiAdd_And_MultiDelete_InTheSame_Transaction_EntryDeleted" executed="True" result="Success" success="True" time="0.05167" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7463" result="Success" success="True" time="0.020">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7463.ShouldThrowDatabaseDoesNotExistsException" executed="True" result="Success" success="True" time="0.0202023" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.Updates" result="Success" success="True" time="0.294">
            <results>
              <test-case name="FastTests.Voron.Trees.Updates.CanUpdateVeryLargeValueAndThenDeleteIt" executed="True" result="Success" success="True" time="0.0484849" />
              <test-case name="FastTests.Voron.Trees.Updates.CanDelete2" executed="True" result="Success" success="True" time="0.0445982" />
              <test-case name="FastTests.Voron.Trees.Updates.CanAddAndUpdate" executed="True" result="Success" success="True" time="0.0387135" />
              <test-case name="FastTests.Voron.Trees.Updates.CanAddAndUpdate1" executed="True" result="Success" success="True" time="0.0462969" />
              <test-case name="FastTests.Voron.Trees.Updates.CanDelete" executed="True" result="Success" success="True" time="0.0396715" />
              <test-case name="FastTests.Voron.Trees.Updates.CanDelete1" executed="True" result="Success" success="True" time="0.0370532" />
              <test-case name="FastTests.Voron.Trees.Updates.CanAddAndUpdate2" executed="True" result="Success" success="True" time="0.0387518" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableValidationTest" result="Success" success="True" time="0.076">
            <results>
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_Blittable" executed="True" result="Success" success="True" time="0.0144668" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.ParseBlitAndValidate" executed="True" result="Success" success="True" time="0.010485" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Simple_Valid_Blittable_Test" executed="True" result="Success" success="True" time="0.0019805" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Names_Offset" executed="True" result="Success" success="True" time="0.0020636" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Empty_Valid_Blittable" executed="True" result="Success" success="True" time="0.0005185" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Root_Token" executed="True" result="Success" success="True" time="0.0010264" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Bool" executed="True" result="Success" success="True" time="0.0007157" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Null" executed="True" result="Success" success="True" time="0.0006144" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Long" executed="True" result="Success" success="True" time="0.0006599" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_object_read_from_non_zero_offset" executed="True" result="Success" success="True" time="0.0029091" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_String" executed="True" result="Success" success="True" time="0.0007256" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Compressed_String" executed="True" result="Success" success="True" time="0.0006077" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_String_With_66K_EscChar" executed="True" result="Success" success="True" time="0.0178087" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_String_With_260_EscChar" executed="True" result="Success" success="True" time="0.0034249" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Complex_Valid_Blittable" executed="True" result="Success" success="True" time="0.0096513" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Float" executed="True" result="Success" success="True" time="0.0007405" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Number_Of_Prop" executed="True" result="Success" success="True" time="0.0008606" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Props_Offset" executed="True" result="Success" success="True" time="0.0009382" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.WithEscape" executed="True" result="Success" success="True" time="0.0005377" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_String" executed="True" result="Success" success="True" time="0.0021376" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Integer" executed="True" result="Success" success="True" time="0.0004826" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Valid_Compressed_String" executed="True" result="Success" success="True" time="0.0021959" />
              <test-case name="FastTests.Blittable.BlittableValidationTest.Invalid_Root_Metadata_Offset" executed="True" result="Success" success="True" time="0.0006635" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Journal.Mvcc" result="Success" success="True" time="0.042">
            <results>
              <test-case name="FastTests.Voron.Journal.Mvcc.ShouldNotFlushUntilThereAreActiveOlderTransactions" executed="True" result="Success" success="True" time="0.0417082" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Includes" result="Success" success="True" time="0.787">
            <results>
              <test-case name="FastTests.Client.Includes.Can_Include_By_Primary_String_Property" executed="True" result="Success" success="True" time="0.116643" />
              <test-case name="FastTests.Client.Includes.Can_Include_By_Secondary_String_Property" executed="True" result="Success" success="True" time="0.0964389" />
              <test-case name="FastTests.Client.Includes.Can_Include_By_Primary_List_Of_Strings" executed="True" result="Success" success="True" time="0.1041222" />
              <test-case name="FastTests.Client.Includes.Can_Load_With_Include" executed="True" result="Success" success="True" time="0.1102579" />
              <test-case name="FastTests.Client.Includes.Can_Include_By_List_Of_Secondary_String_Property" executed="True" result="Success" success="True" time="0.1056105" />
              <test-case name="FastTests.Client.Includes.Can_Query_With_Include_By_Primary_String_Property" executed="True" result="Success" success="True" time="0.133436" />
              <test-case name="FastTests.Client.Includes.Can_Use_Includes_Within_Multi_Load" executed="True" result="Success" success="True" time="0.1200293" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_3917" result="Success" success="True" time="0.369">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3917.SmugglerShouldNotExportImportSubscribtionIdentities" executed="True" result="Success" success="True" time="0.3690827" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9492" result="Success" success="True" time="0.462">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9492.CanQueryIdWithNegate" executed="True" result="Success" success="True" time="0.119065" />
              <test-case name="FastTests.Issues.RavenDB_9492.InQueryOnIdsShouldRunOnCollection" executed="True" result="Success" success="True" time="0.1021187" />
              <test-case name="FastTests.Issues.RavenDB_9492.BetweenQueryOnIds" executed="True" result="Success" success="True" time="0.1191676" />
              <test-case name="FastTests.Issues.RavenDB_9492.NotInQueryOnIdsShouldntRunOnCollection" executed="True" result="Success" success="True" time="0.1216286" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.ObjectJsonParsingTests" result="Success" success="True" time="0.014">
            <results>
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.Zzz" executed="True" result="Success" success="True" time="0.0009951" />
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.CanCompressSmallStrings" executed="True" result="Success" success="True" time="0.0096396" />
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.CanUseNestedObject" executed="True" result="Success" success="True" time="0.0017711" />
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.Dup" executed="True" result="Success" success="True" time="0.0004736" />
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.CanGenerateJsonProperly" executed="True" result="Success" success="True" time="0.0006508" />
              <test-case name="FastTests.Blittable.ObjectJsonParsingTests.CanGenerateJsonProperly_WithEscapePositions" executed="True" result="Success" success="True" time="0.0002139" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_4645" result="Success" success="True" time="0.183">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_4645.ShouldStopPullingTaskWhenSubscriptionIsDeleted" executed="True" result="Success" success="True" time="0.1832143" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.RavenDB_7698" result="Success" success="True" time="0.076">
            <results>
              <test-case name="FastTests.Voron.Storage.RavenDB_7698.CanRestartEmptyAsyncTransaction" executed="True" result="Success" success="True" time="0.0763323" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8959" result="Success" success="True" time="0.072">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8959.CanCustomizeHiloGeneration" executed="True" result="Success" success="True" time="0.0719983" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_10002" result="Success" success="True" time="0.167">
            <results>
              <test-case name="FastTests.Issues.RavenDB_10002.CanHaveArrayInMetadata" executed="True" result="Success" success="True" time="0.1666611" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.ReduceKeyProcessorTests" result="Success" success="True" time="0.018">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.ReduceKeyProcessorTests.Can_handle_values_of_different_types" executed="True" result="Success" success="True" time="0.017793" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_5610" result="Success" success="True" time="0.480">
            <results>
              <test-case name="FastTests.Issues.RavenDB_5610.UpdateType" executed="True" result="Success" success="True" time="0.161509" />
              <test-case name="FastTests.Issues.RavenDB_5610.WillUpdate" executed="True" result="Success" success="True" time="0.3188749" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.UnmanagedStreamTests" result="Success" success="True" time="0.078">
            <results>
              <test-case name="FastTests.Blittable.UnmanagedStreamTests.BigAlloc" executed="True" result="Success" success="True" time="0.0018185" />
              <test-case name="FastTests.Blittable.UnmanagedStreamTests.EnsureSingleChunk" executed="True" result="Success" success="True" time="0.0021664" />
              <test-case name="FastTests.Blittable.UnmanagedStreamTests.SingleByteWritesTest" executed="True" result="Success" success="True" time="0.0383057" />
              <test-case name="FastTests.Blittable.UnmanagedStreamTests.BulkWriteAscendingSizeTest" executed="True" result="Success" success="True" time="0.0115366" />
              <test-case name="FastTests.Blittable.UnmanagedStreamTests.BulkWriteDescendingSizeTest" executed="True" result="Success" success="True" time="0.0239081" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Lucene.UsingUnicode" result="Success" success="True" time="0.265">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.UsingUnicode.TextEnteredShouldNotBeNormalized(content: \&quot;לְשֵׁם יִחוּד קֻדְשָׁא בְּרִיךְ הוּא וּשְׁכִינְתֵּ\&quot;...)" executed="True" result="Success" success="True" time="0.146355" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.UsingUnicode.TextEnteredShouldNotBeNormalized(content: \&quot;Оптиматика\&quot;)" executed="True" result="Success" success="True" time="0.1190137" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9479" result="Success" success="True" time="0.691">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: '\\0')" executed="True" result="Success" success="True" time="0.1137503" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: 0x0001)" executed="True" result="Success" success="True" time="0.0884045" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: 0x0010)" executed="True" result="Success" success="True" time="0.1049128" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: ' ')" executed="True" result="Success" success="True" time="0.1201609" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: 0x007f)" executed="True" result="Success" success="True" time="0.091882" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: 0x009f)" executed="True" result="Success" success="True" time="0.0916402" />
              <test-case name="FastTests.Issues.RavenDB_9479.GetStoreAndGetChar(ch: 'r')" executed="True" result="Success" success="True" time="0.0800586" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueryIntoStream" result="Success" success="True" time="0.749">
            <results>
              <test-case name="FastTests.Client.QueryIntoStream.DocumentQueryWithToStreamAsync" executed="True" result="Success" success="True" time="0.2623372" />
              <test-case name="FastTests.Client.QueryIntoStream.QueryWithToStream" executed="True" result="Success" success="True" time="0.1646243" />
              <test-case name="FastTests.Client.QueryIntoStream.QueryWithToStreamAsync" executed="True" result="Success" success="True" time="0.1581394" />
              <test-case name="FastTests.Client.QueryIntoStream.DocumentQueryWithToStream" executed="True" result="Success" success="True" time="0.1643683" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.Iteration" result="Success" success="True" time="0.140">
            <results>
              <test-case name="FastTests.Voron.Trees.Iteration.CanIterateInOrder" executed="True" result="Success" success="True" time="0.0754926" />
              <test-case name="FastTests.Voron.Trees.Iteration.EmptyIterator" executed="True" result="Success" success="True" time="0.0645134" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9055" result="Success" success="True" time="0.260">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9055.AggressivelyCacheWorksWhenTopologyUpdatesIsDisable" executed="True" result="Success" success="True" time="0.2596361" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9181" result="Success" success="True" time="0.091">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9181.Can_project_object_to_a_single_field" executed="True" result="Success" success="True" time="0.091482" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.LeafsCompression.RavenDB_5384_DecompressionBuffersPoolTests" result="Success" success="True" time="0.069">
            <results>
              <test-case name="FastTests.Voron.LeafsCompression.RavenDB_5384_DecompressionBuffersPoolTests.Should_cleanup_scratch_files_which_are_no_longer_necessary" executed="True" result="Success" success="True" time="0.0690491" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.FixedSize.FixedSizeBugs" result="Success" success="True" time="0.144">
            <results>
              <test-case name="FastTests.Voron.FixedSize.FixedSizeBugs.CanAddDuplicate" executed="True" result="Success" success="True" time="0.0667437" />
              <test-case name="FastTests.Voron.FixedSize.FixedSizeBugs.CanAddDuplicate_Many" executed="True" result="Success" success="True" time="0.0773476" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7654" result="Success" success="True" time="0.009">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7654.TimeSpanCanBeParsedFromStringIntAndDouble" executed="True" result="Success" success="True" time="0.0088921" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.IndexMerging" result="Success" success="True" time="0.847">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.IndexMerging.IndexMergeWithField" executed="True" result="Success" success="True" time="0.421193" />
              <test-case name="FastTests.Server.Documents.Indexing.IndexMerging.IndexMergerWithQueryExpressionSyntaxShouldNotTakeIntoAccountExpressionVariableName" executed="True" result="Success" success="True" time="0.1587444" />
              <test-case name="FastTests.Server.Documents.Indexing.IndexMerging.IndexMergeWithQueryExpressionSyntax" executed="True" result="Success" success="True" time="0.2494475" />
              <test-case name="FastTests.Server.Documents.Indexing.IndexMerging.IndexMergerShouldNotTakeIntoAccountExpressionVariableNameForComplexTypes" executed="True" result="Success" success="True" time="0.0075073" />
              <test-case name="FastTests.Server.Documents.Indexing.IndexMerging.IndexMergerShouldNotTakeIntoAccountExpressionVariableName" executed="True" result="Success" success="True" time="0.0101895" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_10046" result="Success" success="True" time="0.386">
            <results>
              <test-case name="FastTests.Issues.RavenDB_10046.CanProjectWithWrappedParameterAndLet" executed="True" result="Success" success="True" time="0.1519476" />
              <test-case name="FastTests.Issues.RavenDB_10046.CanLoadWithWrappedParameter" executed="True" result="Success" success="True" time="0.1251048" />
              <test-case name="FastTests.Issues.RavenDB_10046.CanProjectWithWrappedParameter" executed="True" result="Success" success="True" time="0.1086033" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8369" result="Success" success="True" time="1.741">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8369.Tombstones_should_be_cleaned_only_after_backup_with_snapshot_backupwhen_delete_is_not_last_operation" executed="True" result="Success" success="True" time="0.3351284">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Issues.RavenDB_8369.Tomstones_should_be_cleaned_properly_for_multiple_backup_tasks_for_snapshot" executed="True" result="Success" success="True" time="0.411286">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Issues.RavenDB_8369.Tombstones_should_be_cleaned_only_after_backup_with_snapshot_backupwhen_delete_is_last_operation" executed="True" result="Success" success="True" time="0.196481">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Issues.RavenDB_8369.Tombstones_should_be_cleaned_only_after_backup_with_binary_backupwhen_delete_is_not_last_operation" executed="True" result="Success" success="True" time="0.201799">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Issues.RavenDB_8369.Tomstones_should_be_cleaned_properly_for_multiple_backup_tasks_for_backup" executed="True" result="Success" success="True" time="0.4058236">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Issues.RavenDB_8369.Tombstones_should_be_cleaned_only_after_backup_with_binary_backupwhen_delete_is_last_operation" executed="True" result="Success" success="True" time="0.1900909">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.PeriodicBackup.PeriodicBackupTests" result="Success" success="True" time="0.083">
            <results>
              <test-case name="FastTests.Server.Documents.PeriodicBackup.PeriodicBackupTests.CanSetupPeriodicBackupWithVeryLargePeriods" executed="True" result="Success" success="True" time="0.0825154">
                <properties>
                  <property name="Category" value="Smuggler" />
                </properties>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7886" result="Success" success="True" time="0.001">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7886.GivenNonExistingFileAsCustomConfigPathConfigurationLoadingShouldThrow" executed="True" result="Success" success="True" time="0.0006121" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.RavenDB_9847" result="Success" success="True" time="0.104">
            <results>
              <test-case name="FastTests.Voron.RavenDB_9847.Can_get_updated_overflow_value_in_same_tx" executed="True" result="Success" success="True" time="0.1039954" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_5178" result="Success" success="True" time="0.101">
            <results>
              <test-case name="FastTests.Issues.RavenDB_5178.CanUsePathLongerThan260Chars" executed="True" result="Success" success="True" time="0.1008081" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Compaction.StorageCompactionTests" result="Success" success="True" time="0.998">
            <results>
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.ShouldReportProgress" executed="False" result="Skipped" time="0">
                <reason>
                  <message>RavenDB-8715, change when report format is finalized</message>
                </reason>
              </test-case>
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.CannotCompactStorageIfIncrementalBackupEnabled" executed="True" result="Success" success="True" time="0.0968375" />
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.ShouldDeleteCurrentJournalEvenThoughItHasAvailableSpace" executed="True" result="Success" success="True" time="0.1602296" />
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.ShouldPreserveTables(entries: 250, seed: 346503021)" executed="True" result="Success" success="True" time="0.2048252" />
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.ShouldPreserveTables(entries: 500, seed: 1468402840)" executed="True" result="Success" success="True" time="0.2226087" />
              <test-case name="FastTests.Voron.Compaction.StorageCompactionTests.ShouldPreserveTables(entries: 1000, seed: 442819012)" executed="True" result="Success" success="True" time="0.3137929" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Utils.IncludeUtilTests" result="Success" success="True" time="0.061">
            <results>
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object_with_suffix2" executed="True" result="Success" success="True" time="0.0022324" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_single_level_nested_path_with_suffix_and_string_value" executed="True" result="Success" success="True" time="0.0014462" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_with_of_arrays_of_nested_objects_should_work1" executed="True" result="Success" success="True" time="0.0036914" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_multiple_level_nested_path" executed="True" result="Success" success="True" time="0.0015453" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_in_flat_object2" executed="True" result="Success" success="True" time="0.0013284" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_multiple_targets_should_work_in_flat_object" executed="True" result="Success" success="True" time="0.0014078" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object2" executed="True" result="Success" success="True" time="0.002488" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_arrays_with_simple_values_should_work" executed="True" result="Success" success="True" time="0.0023334" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_with_prefix_in_flat_object" executed="True" result="Success" success="True" time="0.0007625" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_single_level_nested_path_with_prefix_and_string_value" executed="True" result="Success" success="True" time="0.001364" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_with_of_arrays_of_nested_objects_should_work3" executed="True" result="Success" success="True" time="0.0024009" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_single_level_nested_path" executed="True" result="Success" success="True" time="0.0009356" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_nested_objects_should_work1" executed="True" result="Success" success="True" time="0.002732" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_with_very_short_suffix_in_flat_object" executed="True" result="Success" success="True" time="0.0011176" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_nested_objects_with_suffix_should_work" executed="True" result="Success" success="True" time="0.0029923" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_nested_objects_with_prefix_should_work" executed="True" result="Success" success="True" time="0.0031959" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object_with_prefix2" executed="True" result="Success" success="True" time="0.0018064" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_empty_with_incomplete_suffix_in_flat_object" executed="True" result="Success" success="True" time="0.0009338" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object_with_suffix1" executed="True" result="Success" success="True" time="0.0009466" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_with_suffix_in_flat_object" executed="True" result="Success" success="True" time="0.0007125" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_nested_object2" executed="True" result="Success" success="True" time="0.0013889" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_single_level_nested_path_with_suffix" executed="True" result="Success" success="True" time="0.0014666" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_with_of_arrays_of_nested_objects_should_work2" executed="True" result="Success" success="True" time="0.0023309" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_with_very_short_prefix_in_flat_object" executed="True" result="Success" success="True" time="0.0012937" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object_with_prefix1" executed="True" result="Success" success="True" time="0.0019542" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_empty_with_incomplete_prefix_in_flat_object" executed="True" result="Success" success="True" time="0.0009159" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_nested_objects_should_work2" executed="True" result="Success" success="True" time="0.0075256" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_work_in_flat_object1" executed="True" result="Success" success="True" time="0.0008744" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_value_for_single_level_nested_path_with_prefix" executed="True" result="Success" success="True" time="0.001405" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_of_arrays_of_objects_should_work" executed="True" result="Success" success="True" time="0.0028389" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_should_return_empty_for_incorrect_path" executed="True" result="Success" success="True" time="0.0013382" />
              <test-case name="FastTests.Utils.IncludeUtilTests.FindDocIdFromPath_with_array_selection_should_work_in_flat_object1" executed="True" result="Success" success="True" time="0.0015365" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.InfinityStringTest" result="Success" success="True" time="0.225">
            <results>
              <test-case name="FastTests.Issues.InfinityStringTest.TestInfinityString" executed="True" result="Success" success="True" time="0.2251626" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Tombstones.BasicTombstones" result="Success" success="True" time="0.198">
            <results>
              <test-case name="FastTests.Server.Documents.Tombstones.BasicTombstones.CanCreateAndGetTombstone" executed="True" result="Success" success="True" time="0.0769917" />
              <test-case name="FastTests.Server.Documents.Tombstones.BasicTombstones.Cleanup" executed="True" result="Success" success="True" time="0.1211474" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.LoadAsync" result="Success" success="True" time="0.258">
            <results>
              <test-case name="FastTests.Client.LoadAsync.Should_not_allow_to_execute_more_than_one_async_loads_at_the_same_time" executed="True" result="Success" success="True" time="0.0932875" />
              <test-case name="FastTests.Client.LoadAsync.Load_Documents_By_ids_Async" executed="True" result="Success" success="True" time="0.0872179" />
              <test-case name="FastTests.Client.LoadAsync.Load_Document_By_id_Async" executed="True" result="Success" success="True" time="0.0779216" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.Deletes" result="Success" success="True" time="0.183">
            <results>
              <test-case name="FastTests.Voron.Trees.Deletes.CanDeleteAtRoot" executed="True" result="Success" success="True" time="0.0889898" />
              <test-case name="FastTests.Voron.Trees.Deletes.CanAddVeryLargeValueAndThenDeleteIt" executed="True" result="Success" success="True" time="0.0937032" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9993" result="Success" success="True" time="0.208">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9993.CanHaveArrayInMetadata" executed="True" result="Success" success="True" time="0.1295333" />
              <test-case name="FastTests.Issues.RavenDB_9993.CanAddArrayToMetadataViaClient" executed="True" result="Success" success="True" time="0.0783067" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing" result="Success" success="True" time="1.037">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.IndexDefinitionSerialization" executed="True" result="Success" success="True" time="0.0224309" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.CanInheritConfiguration" executed="True" result="Success" success="True" time="0.0964952" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.NumberOfDocumentsAndTombstonesToProcessShouldBeCalculatedCorrectly" executed="True" result="Success" success="True" time="0.1724378" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.CanPersist" executed="True" result="Success" success="True" time="0.4635239" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.The_easiest_static_index" executed="True" result="Success" success="True" time="0.1073029" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapIndexing.StalenessCalculationShouldWorkForAllDocsIndexes" executed="True" result="Success" success="True" time="0.1745358" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6141" result="Success" success="True" time="0.065">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6141.Resource_specific_paths_do_not_require_any_suffixes" executed="True" result="Success" success="True" time="0.0194252" />
              <test-case name="FastTests.Issues.RavenDB_6141.Should_create_data_in_directory_specified_at_server_level" executed="True" result="Success" success="True" time="0.013089" />
              <test-case name="FastTests.Issues.RavenDB_6141.Should_trim_last_directory_separator_character" executed="True" result="Success" success="True" time="0.0012003" />
              <test-case name="FastTests.Issues.RavenDB_6141.Inherits_server_settings_and_appends_resource_specific_suffix_paths" executed="True" result="Success" success="True" time="0.0122849" />
              <test-case name="FastTests.Issues.RavenDB_6141.Default_database_path_settings" executed="True" result="Success" success="True" time="0.0186291" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.Allocations" result="Success" success="True" time="0.141">
            <results>
              <test-case name="FastTests.Voron.Tables.Allocations.IndexPagesWillBeNearby" executed="True" result="Success" success="True" time="0.1405082" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.TableValueTests" result="Success" success="True" time="0.014">
            <results>
              <test-case name="FastTests.Voron.Tables.TableValueTests.CanBuild" executed="True" result="Success" success="True" time="0.0020945" />
              <test-case name="FastTests.Voron.Tables.TableValueTests.CanSerializeRecursively" executed="True" result="Success" success="True" time="0.0041605" />
              <test-case name="FastTests.Voron.Tables.TableValueTests.CanRead" executed="True" result="Success" success="True" time="0.0020774" />
              <test-case name="FastTests.Voron.Tables.TableValueTests.CanSerializeBool" executed="True" result="Success" success="True" time="0.0059648" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Journal.UncommittedTransactions" result="Success" success="True" time="0.086">
            <results>
              <test-case name="FastTests.Voron.Journal.UncommittedTransactions.UncommittedTransactionMustNotModifyPageTranslationTableOfLogFile" executed="True" result="Success" success="True" time="0.0858034" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Streams.CanUseStream" result="Success" success="True" time="4.566">
            <results>
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 129)" executed="True" result="Success" success="True" time="0.0947747" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 2095)" executed="True" result="Success" success="True" time="0.0874811" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: \&quot;AM4#@dF5Tas\&quot;, size: 4096)" executed="True" result="Success" success="True" time="0.0850306" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 8120)" executed="True" result="Success" success="True" time="0.093251" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 12004)" executed="True" result="Success" success="True" time="0.0856709" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: \&quot;dfgja83mt7s\&quot;, size: 15911)" executed="True" result="Success" success="True" time="0.087069" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 16897)" executed="True" result="Success" success="True" time="0.087445" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 31911)" executed="True" result="Success" success="True" time="0.0967449" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: \&quot;fdd93m34nghdsya\&quot;, size: 91911)" executed="True" result="Success" success="True" time="0.1015283" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: null, size: 1663269866)" executed="True" result="Success" success="True" time="0.1135074" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanWriteAndRead(tag: \&quot;RavenDB\&quot;, size: 637686038)" executed="True" result="Success" success="True" time="0.0998312" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: \&quot;AM4#@dF5Tas\&quot;, size: 129)" executed="True" result="Success" success="True" time="0.086297" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 2095)" executed="True" result="Success" success="True" time="0.0801116" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 4096)" executed="True" result="Success" success="True" time="0.0842049" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: \&quot;AM4#@dF5Tas\&quot;, size: 8120)" executed="True" result="Success" success="True" time="0.0794645" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: \&quot;dfgja83mt7s\&quot;, size: 12004)" executed="True" result="Success" success="True" time="0.0842946" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 15911)" executed="True" result="Success" success="True" time="0.0880584" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 16897)" executed="True" result="Success" success="True" time="0.0888797" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: \&quot;fdd93m34nghdsya\&quot;, size: 31911)" executed="True" result="Success" success="True" time="0.0916727" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 91911)" executed="True" result="Success" success="True" time="0.1029053" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: null, size: 944613513)" executed="True" result="Success" success="True" time="0.090287" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanUpdate(tag: \&quot;no sql\&quot;, size: 2066513332)" executed="True" result="Success" success="True" time="0.0910235" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.TreeShouldReturnAllPagesOccupiedByStreams_RavenDB_5990(tag: \&quot;RavenDB\&quot;, size: 1546581643)" executed="True" result="Success" success="True" time="0.0862044" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.TreeShouldReturnAllPagesOccupiedByStreams_RavenDB_5990(tag: null, size: 1535128733)" executed="True" result="Success" success="True" time="0.0874633" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.TreeShouldReturnAllPagesOccupiedByStreams_RavenDB_5990(tag: \&quot;RavenDB\&quot;, size: 509544905)" executed="True" result="Success" success="True" time="0.0819673" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 129)" executed="True" result="Success" success="True" time="0.0871417" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 2095)" executed="True" result="Success" success="True" time="0.0871526" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 4096)" executed="True" result="Success" success="True" time="0.0891685" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 8120)" executed="True" result="Success" success="True" time="0.093852" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 12004)" executed="True" result="Success" success="True" time="0.0939303" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 15911)" executed="True" result="Success" success="True" time="0.2759199" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 16897)" executed="True" result="Success" success="True" time="0.1455786" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 31911)" executed="True" result="Success" success="True" time="0.1124134" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 91911)" executed="True" result="Success" success="True" time="0.1660568" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanCopyTo(size: 434669826)" executed="True" result="Success" success="True" time="0.1368247" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 50)" executed="True" result="Success" success="True" time="0.0920687" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 129)" executed="True" result="Success" success="True" time="0.1966832" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 2095)" executed="True" result="Success" success="True" time="0.0811544" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: \&quot;debug tag\&quot;, size: 4096)" executed="True" result="Success" success="True" time="0.0798271" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 8120)" executed="True" result="Success" success="True" time="0.0780479" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: \&quot;tag\&quot;, size: 12004)" executed="True" result="Success" success="True" time="0.0798642" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 15911)" executed="True" result="Success" success="True" time="0.081747" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 16897)" executed="True" result="Success" success="True" time="0.0788213" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: \&quot;Debug debug tag\&quot;, size: 31911)" executed="True" result="Success" success="True" time="0.0816161" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 91911)" executed="True" result="Success" success="True" time="0.0883287" />
              <test-case name="FastTests.Voron.Streams.CanUseStream.CanDelete(tag: null, size: 1018094113)" executed="True" result="Success" success="True" time="0.084353" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.SubscriptionOperationsSignaling" result="Success" success="True" time="0.791">
            <results>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionOperationsSignaling.WaitOnSubscriptionStopDueToSubscriberError" executed="True" result="Success" success="True" time="0.1056612" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionOperationsSignaling.WaitOnSubscriptionTaskWhenSubscriptionIsDeleted" executed="True" result="Success" success="True" time="0.103199" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionOperationsSignaling.WaitOnSubscriptionTaskWhenSubscriptionCompleted" executed="True" result="Success" success="True" time="0.1055065" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionOperationsSignaling.WaitOnSubscriptionTaskWhenSubscriptionIsOvertaken" executed="True" result="Success" success="True" time="0.4762885" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.IoMetric" result="Success" success="True" time="0.317">
            <results>
              <test-case name="FastTests.Sparrow.IoMetric.CanReportMetricsInParallel" executed="True" result="Success" success="True" time="0.3135144" />
              <test-case name="FastTests.Sparrow.IoMetric.CanProperlyReportIoMetrics" executed="True" result="Success" success="True" time="0.0031258" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.MutatingJsonTests" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanModifyNestedObjectProperty" executed="True" result="Success" success="True" time="0.0017237" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanAddAndRemoveProperty" executed="True" result="Success" success="True" time="0.0004208" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanAddProperty" executed="True" result="Success" success="True" time="0.0004721" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.WillPreserveEscapes" executed="True" result="Success" success="True" time="0.0005699" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanModifyArrayProperty" executed="True" result="Success" success="True" time="0.0009962" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanCompressFields" executed="True" result="Success" success="True" time="0.0005378" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanRemoveAndAddProperty" executed="True" result="Success" success="True" time="0.000685" />
              <test-case name="FastTests.Blittable.MutatingJsonTests.CanAddNegativeIntegerProperty" executed="True" result="Success" success="True" time="0.0008299" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7329" result="Success" success="True" time="0.064">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7329.PublicTcpUrlShouldNotBeZeros" executed="True" result="Success" success="True" time="0.0087422" />
              <test-case name="FastTests.Issues.RavenDB_7329.UrlSchemeShouldPassThrough" executed="True" result="Success" success="True" time="0.0153992" />
              <test-case name="FastTests.Issues.RavenDB_7329.PublicTcpUrlShouldNotHavePortZero" executed="True" result="Success" success="True" time="0.0021237" />
              <test-case name="FastTests.Issues.RavenDB_7329.GivenPublicTcpServerUrlItShouldUseThatForNodeTcpServerUrl" executed="True" result="Success" success="True" time="0.0056949" />
              <test-case name="FastTests.Issues.RavenDB_7329.PublicUrlShouldNotBeZeros" executed="True" result="Success" success="True" time="0.0039336" />
              <test-case name="FastTests.Issues.RavenDB_7329.GivenPortZeroInTcpServerUrlShouldTakeItFromArg" executed="True" result="Success" success="True" time="0.0055662" />
              <test-case name="FastTests.Issues.RavenDB_7329.PublicUrlShouldHaveSameSchemeAsBindingOne" executed="True" result="Success" success="True" time="0.0023859" />
              <test-case name="FastTests.Issues.RavenDB_7329.GivenNonZeroAddressReturnsServersWebUrl" executed="True" result="Success" success="True" time="0.0053263" />
              <test-case name="FastTests.Issues.RavenDB_7329.GivenZerosInServerUrlShouldUseWebUriForNodeUrl" executed="True" result="Success" success="True" time="0.0048591" />
              <test-case name="FastTests.Issues.RavenDB_7329.GivenSetPublicServerShouldUseThatForNodeUrl" executed="True" result="Success" success="True" time="0.0066132" />
              <test-case name="FastTests.Issues.RavenDB_7329.PublicUrlShouldNotHavePortZero" executed="True" result="Success" success="True" time="0.0035795" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Indexing.IndexExtensionFromClient" result="Success" success="True" time="0.436">
            <results>
              <test-case name="FastTests.Client.Indexing.IndexExtensionFromClient.CanCompileIndexWithExtensions" executed="True" result="Success" success="True" time="0.4360556" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RevisionsSubscriptions" result="Success" success="True" time="1.402">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RevisionsSubscriptions.PlainRevisionsSubscriptionsCompareDocs" executed="True" result="Success" success="True" time="0.2163817" />
              <test-case name="FastTests.Client.Subscriptions.RevisionsSubscriptions.RevisionsSubscriptionsWithCustomScriptCompareDocs" executed="True" result="Success" success="True" time="0.3923613" />
              <test-case name="FastTests.Client.Subscriptions.RevisionsSubscriptions.RevisionsSubscriptionsWithCustomScript" executed="True" result="Success" success="True" time="0.3819441" />
              <test-case name="FastTests.Client.Subscriptions.RevisionsSubscriptions.PlainRevisionsSubscriptions" executed="True" result="Success" success="True" time="0.4114122" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.ThousandsSeparatorRavenDb8416" result="Success" success="True" time="0.104">
            <results>
              <test-case name="FastTests.Issues.ThousandsSeparatorRavenDb8416.CanUseThousandSeparatorInQueries" executed="True" result="Success" success="True" time="0.1035792" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.RavenDB_9292" result="Success" success="True" time="0.200">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_9292.Group_by_array_and_sum_by_array_items" executed="True" result="Success" success="True" time="0.1997233" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7953" result="Success" success="True" time="0.002">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7953.StringMethodsShouldBeAvailableInLazyStringValue" executed="True" result="Success" success="True" time="0.0024381" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6305" result="Success" success="True" time="0.117">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6305.CanQueryValueObject" executed="True" result="Success" success="True" time="0.1165303" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.IncludesUtilTests" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Client.IncludesUtilTests.include_with_prefix" executed="True" result="Success" success="True" time="0.002864" />
              <test-case name="FastTests.Client.IncludesUtilTests.include_with_suffix" executed="True" result="Success" success="True" time="0.0030467" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.RavenDB_8761" result="Success" success="True" time="0.461">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8761.Can_group_by_array_content" executed="True" result="Success" success="True" time="0.2431303" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8761.Can_group_by_array_values" executed="True" result="Success" success="True" time="0.2180435" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.FirstClassPatch" result="Success" success="True" time="1.649">
            <results>
              <test-case name="FastTests.Client.FirstClassPatch.CanAddToArrayAsync" executed="True" result="Success" success="True" time="0.1701999" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatchAndModifyAsync" executed="True" result="Success" success="True" time="0.1109807" />
              <test-case name="FastTests.Client.FirstClassPatch.CanAddToArray" executed="True" result="Success" success="True" time="0.1146492" />
              <test-case name="FastTests.Client.FirstClassPatch.CanRemoveFromArrayAsync" executed="True" result="Success" success="True" time="0.1090789" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatchAsync" executed="True" result="Success" success="True" time="0.1281294" />
              <test-case name="FastTests.Client.FirstClassPatch.CanRemoveFromArray" executed="True" result="Success" success="True" time="0.1027897" />
              <test-case name="FastTests.Client.FirstClassPatch.ShouldMergePatchCalls" executed="True" result="Success" success="True" time="0.1127974" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatchAndModify" executed="True" result="Success" success="True" time="0.1036193" />
              <test-case name="FastTests.Client.FirstClassPatch.CanIncrement" executed="True" result="Success" success="True" time="0.1154213" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatchComplex" executed="True" result="Success" success="True" time="0.1137934" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatch" executed="True" result="Success" success="True" time="0.1161013" />
              <test-case name="FastTests.Client.FirstClassPatch.CanPatchComplexAsync" executed="True" result="Success" success="True" time="0.115903" />
              <test-case name="FastTests.Client.FirstClassPatch.ShouldMergePatchCallsAsync" executed="True" result="Success" success="True" time="0.1180968" />
              <test-case name="FastTests.Client.FirstClassPatch.CanIncrementAsync" executed="True" result="Success" success="True" time="0.1175492" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7493" result="Success" success="True" time="0.022">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7493.Ensure_deserialization_routines_are_properly_created" executed="True" result="Success" success="True" time="0.0224721" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.TrackEntity" result="Success" success="True" time="0.222">
            <results>
              <test-case name="FastTests.Client.TrackEntity.Loading_Deleted_Document_Should_Return_Null" executed="True" result="Success" success="True" time="0.0928228" />
              <test-case name="FastTests.Client.TrackEntity.Deleting_Entity_That_Is_Not_Tracked_Should_Throw" executed="True" result="Success" success="True" time="0.0637574" />
              <test-case name="FastTests.Client.TrackEntity.Storing_Document_With_The_Same_Id_In_The_Same_Session_Should_Throw" executed="True" result="Success" success="True" time="0.0655552" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.CRUD" result="Success" success="True" time="0.979">
            <results>
              <test-case name="FastTests.Client.CRUD.CRUD_Can_Update_Property_From_Null_To_Object" executed="True" result="Success" success="True" time="0.0987868" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_In_Object_3" executed="True" result="Success" success="True" time="0.0724811" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_In_Object_4" executed="True" result="Success" success="True" time="0.0716252" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_In_Object_6" executed="True" result="Success" success="True" time="0.086967" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_In_Object" executed="True" result="Success" success="True" time="0.080432" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_of_Arrays" executed="True" result="Success" success="True" time="0.0844252" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_with_what_changed" executed="True" result="Success" success="True" time="0.0802851" />
              <test-case name="FastTests.Client.CRUD.CRUD_Can_Update_Property_To_Null" executed="True" result="Success" success="True" time="0.0771597" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Null" executed="True" result="Success" success="True" time="0.0775165" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_of_objects" executed="True" result="Success" success="True" time="0.0874815" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations_With_Array_In_Object_2" executed="True" result="Success" success="True" time="0.0763179" />
              <test-case name="FastTests.Client.CRUD.CRUD_Operations" executed="True" result="Success" success="True" time="0.0858398" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.MultiTreeSize" result="Success" success="True" time="0.244">
            <results>
              <test-case name="FastTests.Voron.MultiTreeSize.TwoSmall_AddMulti_WillUseOnePage" executed="True" result="Success" success="True" time="0.120619" />
              <test-case name="FastTests.Voron.MultiTreeSize.Single_AddMulti_WillUseOnePage" executed="True" result="Success" success="True" time="0.123522" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8439" result="Success" success="True" time="0.001">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8439.NighlyBuildForceShouldBeSetToFalse" executed="True" result="Success" success="True" time="0.0008557" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.FixedSize.RavenDB_6073" result="Success" success="True" time="0.138">
            <results>
              <test-case name="FastTests.Voron.FixedSize.RavenDB_6073.Branch_page_collapsing_during_tree_rebalancing" executed="True" result="Success" success="True" time="0.137604" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing" result="Success" success="True" time="1.301">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanStoreAndReadReduceStats" executed="True" result="Success" success="True" time="0.091133" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanGroupByNestedFieldAndAggregateOnCollection" executed="True" result="Success" success="True" time="0.1057356" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanUpdateByChangingValue" executed="True" result="Success" success="True" time="0.1212564" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanUpdateByChangingReduceKey" executed="True" result="Success" success="True" time="0.1009638" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.MultipleReduceKeys(numberOfUsers: 100, locations: [\&quot;Poland\&quot;, \&quot;Israel\&quot;, \&quot;USA\&quot;])" executed="True" result="Success" success="True" time="0.104899" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.DefinitionOfAutoMapReduceIndexIsPersisted" executed="True" result="Success" success="True" time="0.4269158" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanDelete" executed="True" result="Success" success="True" time="0.1414199" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.GroupByMultipleFields" executed="True" result="Success" success="True" time="0.0963179" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapReduceIndexing.CanUseSimpleReduction" executed="True" result="Success" success="True" time="0.1121039" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.ExistsAsync" result="Success" success="True" time="0.103">
            <results>
              <test-case name="FastTests.Client.ExistsAsync.CheckIfDocumentExists" executed="True" result="Success" success="True" time="0.1032616" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Delete" result="Success" success="True" time="0.163">
            <results>
              <test-case name="FastTests.Client.Delete.Delete_Documents_By_id" executed="True" result="Success" success="True" time="0.0797563" />
              <test-case name="FastTests.Client.Delete.Delete_Document_By_entity" executed="True" result="Success" success="True" time="0.0836459" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.QueryingStopwordWithPrefixShouldWork" result="Success" success="True" time="0.212">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.QueryingStopwordWithPrefixShouldWork.CanQueryStopwordsWithPrefix" executed="True" result="Success" success="True" time="0.2117086" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.InitialSize" result="Success" success="True" time="0.450">
            <results>
              <test-case name="FastTests.Voron.Storage.InitialSize.WhenInitialFileSizeIsSetTheFileSizeForDataFileAndScratchFileShouldBeSetAccordinglyAndItWillBeRoundedToTheNearestGranularity" executed="True" result="Success" success="True" time="0.1578258" />
              <test-case name="FastTests.Voron.Storage.InitialSize.WhenInitialFileSizeIsNotSetTheFileSizeForDataFileAndScratchFileShouldBeSetToSystemAllocationGranularity" executed="True" result="Success" success="True" time="0.1482283" />
              <test-case name="FastTests.Voron.Storage.InitialSize.WhenInitialFileSizeIsSetTheFileSizeForDataFileAndScratchFileShouldBeSetAccordingly" executed="True" result="Success" success="True" time="0.1442403" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.Restarts" result="Success" success="True" time="0.428">
            <results>
              <test-case name="FastTests.Voron.Storage.Restarts.DataIsKeptAfterRestartForSubTrees" executed="True" result="Success" success="True" time="0.1367969" />
              <test-case name="FastTests.Voron.Storage.Restarts.DataIsKeptAfterRestart" executed="True" result="Success" success="True" time="0.1376455" />
              <test-case name="FastTests.Voron.Storage.Restarts.DataIsKeptAfterRestart_OnDisk" executed="True" result="Success" success="True" time="0.153791" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.TableIndexes" result="Success" success="True" time="0.553">
            <results>
              <test-case name="FastTests.Voron.Tables.TableIndexes.Insert_same_value_to_index_deosnt_throw" executed="True" result="Success" success="True" time="0.1396574" />
              <test-case name="FastTests.Voron.Tables.TableIndexes.Update_same_value_to_index_doesnt_throw" executed="True" result="Success" success="True" time="0.1352386" />
              <test-case name="FastTests.Voron.Tables.TableIndexes.Insert_same_value_to_fixed_sized_index_throws" executed="True" result="Success" success="True" time="0.1319318" />
              <test-case name="FastTests.Voron.Tables.TableIndexes.Update_same_value_to_fixed_sized_index_throws" executed="True" result="Success" success="True" time="0.146549" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.BitsTests" result="Success" success="True" time="0.009">
            <results>
              <test-case name="FastTests.Sparrow.BitsTests.Bits_LeadingZeroes" executed="True" result="Success" success="True" time="0.0017066" />
              <test-case name="FastTests.Sparrow.BitsTests.Bits_MostSignificativeBit" executed="True" result="Success" success="True" time="0.0053325" />
              <test-case name="FastTests.Sparrow.BitsTests.Bits_NextPowerOf2" executed="True" result="Success" success="True" time="0.0007514" />
              <test-case name="FastTests.Sparrow.BitsTests.Bits_Ceil2Log" executed="True" result="Success" success="True" time="0.0015297" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6341" result="Success" success="True" time="0.022">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6341.CommandsShouldNotHavePublicSettersInPropertiesOrNonReadOnlyPublicFields" executed="True" result="Success" success="True" time="0.0218518" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Lazy.Async.LazyAsync" result="Success" success="True" time="0.661">
            <results>
              <test-case name="FastTests.Client.Lazy.Async.LazyAsync.CanExecuteAllPendingLazyOperations" executed="True" result="Success" success="True" time="0.1458069" />
              <test-case name="FastTests.Client.Lazy.Async.LazyAsync.WithQueuedActions_Load" executed="True" result="Success" success="True" time="0.0752767" />
              <test-case name="FastTests.Client.Lazy.Async.LazyAsync.LazyLoadById" executed="True" result="Success" success="True" time="0.2396871" />
              <test-case name="FastTests.Client.Lazy.Async.LazyAsync.WithTransformer" executed="True" result="Success" success="True" time="0.0871953" />
              <test-case name="FastTests.Client.Lazy.Async.LazyAsync.CanLazilyLoadEntity" executed="True" result="Success" success="True" time="0.113355" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.Subscriptions" result="Success" success="True" time="0.881">
            <results>
              <test-case name="FastTests.Client.Subscriptions.Subscriptions.CreateSubscription" executed="True" result="Success" success="True" time="0.0999482" />
              <test-case name="FastTests.Client.Subscriptions.Subscriptions.SubscriptionStrategyConnectIfFree" executed="True" result="Success" success="True" time="0.2278677" />
              <test-case name="FastTests.Client.Subscriptions.Subscriptions.SubscriptionSimpleTakeOverStrategy" executed="True" result="Success" success="True" time="0.1723039" />
              <test-case name="FastTests.Client.Subscriptions.Subscriptions.BasicSusbscriptionTest" executed="True" result="Success" success="True" time="0.1585306" />
              <test-case name="FastTests.Client.Subscriptions.Subscriptions.SubscriptionWaitStrategy" executed="True" result="Success" success="True" time="0.2219483" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_3484" result="Success" success="True" time="11.023">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3484.ShouldRejectWhen_OpenIfFree_StrategyIsUsed" executed="True" result="Success" success="True" time="0.1625067" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3484.OpenIfFree_ShouldBeDefaultStrategy" executed="True" result="Success" success="True" time="0.0051373" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3484.ShouldProcessSubscriptionAfterItGetsReleasedWhen_WaitForFree_StrategyIsSet" executed="True" result="Success" success="True" time="9.5678599" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3484.ShouldReplaceActiveClientWhen_TakeOver_StrategyIsUsed" executed="True" result="Success" success="True" time="1.1824496" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3484.ShouldOpenSubscriptionWith_WaitForFree_StrategyWhenItIsNotInUseByAnotherClient" executed="True" result="Success" success="True" time="0.1051528" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.MoreLikeThis.MoreLikeThisTests" result="Success" success="True" time="3.064">
            <results>
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Can_Use_Boost_Param" executed="True" result="Success" success="True" time="0.2576764" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsWhenIndexHasSlashInIt" executed="True" result="Success" success="True" time="0.1657683" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Query_On_Document_That_Does_Not_Have_High_Enough_Word_Frequency" executed="True" result="Success" success="True" time="0.1673371" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Test_With_Lots_Of_Random_Data" executed="True" result="Success" success="True" time="0.2550201" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Each_Field_Should_Use_Correct_Analyzer" executed="True" result="Success" success="True" time="0.221755" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Do_Not_Pass_FieldNames" executed="True" result="Success" success="True" time="0.1844388" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanCompareDocumentsWithIntegerIdentifiers" executed="True" result="Success" success="True" time="0.2072914" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanMakeDynamicDocumentQueriesWithComplexProperties" executed="True" result="Success" success="True" time="0.2244792" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsUsingTermVectorsAsync" executed="True" result="Success" success="True" time="0.1860529" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsUsingTermVectors" executed="True" result="Success" success="True" time="0.1719907" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsUsingTermVectorsWithDocumentQuery" executed="True" result="Success" success="True" time="0.1694125" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Can_Use_Min_Doc_Freq_Param" executed="True" result="Success" success="True" time="0.1642524" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsUsingStorage" executed="True" result="Success" success="True" time="0.177924" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanMakeDynamicDocumentQueries" executed="True" result="Success" success="True" time="0.1622342" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.Can_Use_Stop_Words" executed="True" result="Success" success="True" time="0.1855475" />
              <test-case name="FastTests.Client.MoreLikeThis.MoreLikeThisTests.CanGetResultsUsingTermVectorsAndStorage" executed="True" result="Success" success="True" time="0.1628138" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Issue_6069" result="Success" success="True" time="0.080">
            <results>
              <test-case name="FastTests.Client.Issue_6069.CRUD_Operations" executed="True" result="Success" success="True" time="0.0798336" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests" result="Success" success="True" time="0.005">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Can_reuse_reader_multiple_times" executed="True" result="Success" success="True" time="0.0025763" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_unicode(expected: \&quot;ąęłóżźćń\&quot;)" executed="True" result="Success" success="True" time="0.0008419" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_unicode(expected: \&quot;לכובע שלי שלוש פינות\&quot;)" executed="True" result="Success" success="True" time="0.0000171" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_very_long_text(length: 1024)" executed="True" result="Success" success="True" time="0.0005049" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_very_long_text(length: 1500)" executed="True" result="Success" success="True" time="0.0000268" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_very_long_text(length: 2048)" executed="True" result="Success" success="True" time="0.000677" />
              <test-case name="FastTests.Server.Documents.Indexing.Lucene.LazyStringValueReaderTests.Reads_very_long_text(length: 3000)" executed="True" result="Success" success="True" time="0.0000881" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.UnmanagedWriteBufferTests" result="Success" success="True" time="0.048">
            <results>
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.RepeatedDisposeOnDistinctCopiesDoesNotThrowMirror" executed="True" result="Success" success="True" time="0.0019597" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteThrowsAfterDispose" executed="True" result="Success" success="True" time="0.0018006" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteMultipleBytesInBatchNoAllocations" executed="True" result="Success" success="True" time="0.0026889" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.BehavesWithRespectToCopying" executed="True" result="Success" success="True" time="0.0027659" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteMultipleBytesNoAllocations" executed="True" result="Success" success="True" time="0.0022499" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.RepeatedDisposeDoesNotThrow" executed="True" result="Success" success="True" time="0.0016584" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteMultipleBytesWithAllocations" executed="True" result="Success" success="True" time="0.0015749" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.CopiedDisposedObjectRemainsDisposed" executed="True" result="Success" success="True" time="0.0014149" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.DoesNotLeakMemoryWhenClearing" executed="True" result="Success" success="True" time="0.0016871" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.CopyToWithAllocations" executed="True" result="Success" success="True" time="0.0021186" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteMultipleBytesInBatchWithAllocations" executed="True" result="Success" success="True" time="0.0017496" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteSingleByteNoAllocations" executed="True" result="Success" success="True" time="0.0015723" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.CopyToNoAllocations" executed="True" result="Success" success="True" time="0.0028854" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.EnsureSingleChunkDoesNotChangeSizeOrContentsWithAllocations" executed="True" result="Success" success="True" time="0.0026576" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.CopyToThrowsAfterDispose" executed="True" result="Success" success="True" time="0.0017715" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.RepeatedDisposeOnDistinctCopiesDoesNotThrow" executed="True" result="Success" success="True" time="0.0026791" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteByteThrowsAfterDispose" executed="True" result="Success" success="True" time="0.0024975" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.ClearResetsSizeAndEffectivellyClears" executed="True" result="Success" success="True" time="0.010389" />
              <test-case name="FastTests.Sparrow.UnmanagedWriteBufferTests.WriteTwoBytesWithAllocation" executed="True" result="Success" success="True" time="0.0017901" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.BasicUsage" result="Success" success="True" time="0.672">
            <results>
              <test-case name="FastTests.Voron.Tables.BasicUsage.CanInsertThenUpdateThenRead" executed="True" result="Success" success="True" time="0.1839644" />
              <test-case name="FastTests.Voron.Tables.BasicUsage.CanInsertThenDelete" executed="True" result="Success" success="True" time="0.1643741" />
              <test-case name="FastTests.Voron.Tables.BasicUsage.CanInsertThenRead" executed="True" result="Success" success="True" time="0.158112" />
              <test-case name="FastTests.Voron.Tables.BasicUsage.HasCorrespondingRootObjectType" executed="True" result="Success" success="True" time="0.1653475" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.IdleOperations" result="Success" success="True" time="1.086">
            <results>
              <test-case name="FastTests.Server.Basic.IdleOperations.Should_Update_LastWork" executed="True" result="Success" success="True" time="0.0771088" />
              <test-case name="FastTests.Server.Basic.IdleOperations.Should_Cleanup_Resources" executed="True" result="Success" success="True" time="0.9494001" />
              <test-case name="FastTests.Server.Basic.IdleOperations.Should_Update_LastIdle" executed="True" result="Success" success="True" time="0.0595425" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.SubscriptionsBasic" result="Success" success="True" time="7.719">
            <results>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.CanUseNestedPropertiesInSubscriptionCriteria" executed="True" result="Success" success="True" time="0.1222585" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.CanReleaseSubscription" executed="True" result="Success" success="True" time="0.1769696" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.RavenDB_3453_ShouldDeserializeTheWholeDocumentsAfterTypedSubscription" executed="True" result="Success" success="True" time="0.1014466" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldPullDocumentsAfterBulkInsert" executed="True" result="Success" success="True" time="0.1641999" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.CanDeleteSubscription" executed="True" result="Success" success="True" time="0.0879513" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.RunningSubscriptionShouldJumpToNextChangeVectorIfItWasChangedByAdmin" executed="True" result="Success" success="True" time="4.9858608" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.WillAcknowledgeEmptyBatches" executed="True" result="Success" success="True" time="0.2105702" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldThrowOnAttemptToOpenAlreadyOpenedSubscription" executed="True" result="Success" success="True" time="0.1675472" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldRespectMaxDocCountInBatch" executed="True" result="Success" success="True" time="0.1516552" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.DisposingOneSubscriptionShouldNotAffectOnNotificationsOfOthers" executed="True" result="Success" success="True" time="0.112777" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldKeepPullingDocsAfterServerRestart" executed="True" result="Success" success="True" time="0.2991966" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldSendAllNewAndModifiedDocs" executed="True" result="Success" success="True" time="0.0942844" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldStreamAllDocumentsAfterSubscriptionCreation" executed="True" result="Success" success="True" time="0.1203641" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldRespectCollectionCriteria" executed="True" result="Success" success="True" time="0.165113" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.CanGetSubscriptionsFromDatabase" executed="True" result="Success" success="True" time="0.1131522" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldRespectStartsWithCriteria" executed="False" result="Skipped" time="0">
                <reason>
                  <message>RavenDB-8404, RavenDB-8682</message>
                </reason>
              </test-case>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.CanSetToIgnoreSubscriberErrors" executed="True" result="Success" success="True" time="0.1103351" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldThrowWhenOpeningNoExisingSubscription" executed="True" result="Success" success="True" time="0.0794536" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldStopPullingDocsAndCloseSubscriptionOnSubscriberErrorByDefault" executed="True" result="Success" success="True" time="0.1118479" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.ShouldIncrementFailingTests" executed="True" result="Success" success="True" time="0.2287251" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsBasic.RavenDB_3452_ShouldStopPullingDocsIfReleased" executed="True" result="Success" success="True" time="0.1153337" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7701" result="Success" success="True" time="0.128">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7701.cannot_create_database_with_the_same_name" executed="True" result="Success" success="True" time="0.1276382" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7636" result="Success" success="True" time="0.008">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7636.GivenNoCertificateSpecifiedAndServerBoundOutsideOfUnsecureAccessAllowedShouldError" executed="True" result="Success" success="True" time="0.0084821" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Indexing.StaticIndexesFromClient" result="Success" success="True" time="0.773">
            <results>
              <test-case name="FastTests.Client.Indexing.StaticIndexesFromClient.Can_Put_And_Replace" executed="True" result="Success" success="True" time="0.2852719" />
              <test-case name="FastTests.Client.Indexing.StaticIndexesFromClient.Can_start_and_stop_index" executed="True" result="Success" success="True" time="0.1771512" />
              <test-case name="FastTests.Client.Indexing.StaticIndexesFromClient.Can_Put_Replace_And_Back_To_Original" executed="True" result="Success" success="True" time="0.1748498" />
              <test-case name="FastTests.Client.Indexing.StaticIndexesFromClient.Can_Put" executed="True" result="Success" success="True" time="0.135518" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.LimitSubscriptionsConnectionsAmount" result="Success" success="True" time="0.168">
            <results>
              <test-case name="FastTests.Client.Subscriptions.LimitSubscriptionsConnectionsAmount.Run" executed="True" result="Success" success="True" time="0.1676789" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.FixedSize.RavenDB_6350" result="Success" success="True" time="0.205">
            <results>
              <test-case name="FastTests.Voron.FixedSize.RavenDB_6350.Invalid_usage_of_DirectAdds" executed="True" result="Success" success="True" time="0.2049458" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_8831" result="Success" success="True" time="0.192">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8831.ReadDocWithCompressedStringFromOneContextAndWriteToAnother" executed="True" result="Success" success="True" time="0.0836786" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8831.SubscriptionShouldRespectDocumentsWithCompressedData" executed="True" result="Success" success="True" time="0.1084936" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Indexing.IndexesFromClient" result="Success" success="True" time="1.787">
            <results>
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.CanReset" executed="True" result="Success" success="True" time="0.1194572" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.GetTerms" executed="True" result="Success" success="True" time="0.1414486" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.CanExplain" executed="True" result="Success" success="True" time="0.1899392" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.GetIndexNames" executed="True" result="Success" success="True" time="0.1379963" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.SetLockModeAndSetPriority" executed="True" result="Success" success="True" time="0.1841077" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.GetErrors" executed="True" result="Success" success="True" time="0.1559531" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.MoreLikeThis" executed="True" result="Success" success="True" time="0.2406597" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.CanStopAndStart" executed="True" result="Success" success="True" time="0.1444106" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.GetDefinition" executed="True" result="Success" success="True" time="0.1513624" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.CanDelete" executed="True" result="Success" success="True" time="0.0989688" />
              <test-case name="FastTests.Client.Indexing.IndexesFromClient.Performance" executed="True" result="Success" success="True" time="0.2227583" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.SerializationDeserializationValidation" result="Success" success="True" time="0.076">
            <results>
              <test-case name="FastTests.Blittable.SerializationDeserializationValidation.ValidateRanges" executed="True" result="Success" success="True" time="0.0755477" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.MemoryPoolTests" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Blittable.MemoryPoolTests.ParallelSerialAllocationAndRelease" executed="True" result="Success" success="True" time="0.0017996" />
              <test-case name="FastTests.Blittable.MemoryPoolTests.SerialAllocationAndRelease" executed="True" result="Success" success="True" time="0.0013459" />
              <test-case name="FastTests.Blittable.MemoryPoolTests.ParallelAllocationAndReleaseSeperately" executed="True" result="Success" success="True" time="0.003116" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Static.CollisionsOfReduceKeyHashes" result="Success" success="True" time="0.777">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Static.CollisionsOfReduceKeyHashes.Static_index_should_produce_multiple_outputs(numberOfUsers: 5, locations: [\&quot;Israel\&quot;, \&quot;Poland\&quot;])" executed="True" result="Success" success="True" time="0.4676173" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.CollisionsOfReduceKeyHashes.Static_index_should_produce_multiple_outputs(numberOfUsers: 100, locations: [\&quot;Israel\&quot;, \&quot;Poland\&quot;, \&quot;USA\&quot;])" executed="True" result="Success" success="True" time="0.1117749" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.CollisionsOfReduceKeyHashes.Auto_index_should_produce_multiple_outputs(numberOfUsers: 5, locations: [\&quot;Israel\&quot;, \&quot;Poland\&quot;])" executed="True" result="Success" success="True" time="0.0988655" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.CollisionsOfReduceKeyHashes.Auto_index_should_produce_multiple_outputs(numberOfUsers: 100, locations: [\&quot;Israel\&quot;, \&quot;Poland\&quot;, \&quot;USA\&quot;])" executed="True" result="Success" success="True" time="0.0987656" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_7044" result="Success" success="True" time="0.147">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_7044.Can_filter_by_property_of_composite_group_by_key" executed="True" result="Success" success="True" time="0.1467331" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Bugs.RavenDB_8837" result="Success" success="True" time="0.207">
            <results>
              <test-case name="FastTests.Voron.Bugs.RavenDB_8837.Braking_large_allocation_in_scratch_file_has_to_really_create_separate_pages_of_size_one" executed="True" result="Success" success="True" time="0.2070299" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.GroupByMultipleFields" result="Success" success="True" time="0.372">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.GroupByMultipleFields.Group_by_multiple_fields" executed="True" result="Success" success="True" time="0.1846697" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.GroupByMultipleFields.Select_composite_group_by_key" executed="True" result="Success" success="True" time="0.1872603" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Collections" result="Success" success="True" time="0.298">
            <results>
              <test-case name="FastTests.Server.Documents.Collections.CanSurviveRestart" executed="True" result="Success" success="True" time="0.2977181" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.EncryptionTests" result="Success" success="True" time="0.509">
            <results>
              <test-case name="FastTests.Sparrow.EncryptionTests.WriteAndReadPageUsingCryptoPager" executed="True" result="Success" success="True" time="0.2174111" />
              <test-case name="FastTests.Sparrow.EncryptionTests.WriteSeekAndReadInTempCryptoStream(seed: 2145877887)" executed="True" result="Success" success="True" time="0.2913693" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9106" result="Success" success="True" time="0.227">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9106.CollectionQueryStartsWithOnIdsShouldNotYieldResultsFromAnotherCollection" executed="True" result="Success" success="True" time="0.1319893" />
              <test-case name="FastTests.Issues.RavenDB_9106.CollectionQueryOnIdsShouldNotYieldResultsFromAnotherCollection" executed="True" result="Success" success="True" time="0.0954752" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag" result="Success" success="True" time="0.001">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag.Include" executed="True" result="Success" success="True" time="0.0003577" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag.Load" executed="True" result="Success" success="True" time="0.000238" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag.WithoutIncludeOrLoad" executed="True" result="Success" success="True" time="0.000199" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag.SelectWithLoad" executed="True" result="Success" success="True" time="0.0001983" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.IncludeOrLoadShouldReturnAllDocsEtag.FunctionWithLoad" executed="True" result="Success" success="True" time="0.0002099" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Expiration.ExpirationTests" result="Success" success="True" time="1.491">
            <results>
              <test-case name="FastTests.Server.Documents.Expiration.ExpirationTests.CanAddEntityWithExpiry_ThenReadItBeforeItExpires_ButWillNotBeAbleToReadItAfterExpiry" executed="True" result="Success" success="True" time="0.7616415" />
              <test-case name="FastTests.Server.Documents.Expiration.ExpirationTests.CanAddALotOfEntitiesWithSameExpiry_ThenReadItBeforeItExpires_ButWillNotBeAbleToReadItAfterExpiry(count: 10)" executed="True" result="Success" success="True" time="0.1505258" />
              <test-case name="FastTests.Server.Documents.Expiration.ExpirationTests.CanAddALotOfEntitiesWithSameExpiry_ThenReadItBeforeItExpires_ButWillNotBeAbleToReadItAfterExpiry(count: 100)" executed="True" result="Success" success="True" time="0.481259" />
              <test-case name="FastTests.Server.Documents.Expiration.ExpirationTests.CanAddEntityWithExpiry_BeforeActivatingExpirtaion_WillNotBeAbleToReadItAfterExpiry" executed="True" result="Success" success="True" time="0.0979116" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Optimizations.Writes" result="Success" success="True" time="0.215">
            <results>
              <test-case name="FastTests.Voron.Optimizations.Writes.SinglePageModificationDoNotCauseCopyingAllIntermediatePages" executed="True" result="Success" success="True" time="0.2154696" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.HashingTests" result="Success" success="True" time="0.191">
            <results>
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 1)" executed="True" result="Success" success="True" time="0.0013309" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 4)" executed="True" result="Success" success="True" time="0.0015782" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 15)" executed="True" result="Success" success="True" time="0.0000254" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 65)" executed="True" result="Success" success="True" time="0.0002522" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 90)" executed="True" result="Success" success="True" time="0.0004685" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 128)" executed="True" result="Success" success="True" time="0.001467" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 129)" executed="True" result="Success" success="True" time="0.0036379" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingPrefixing(bufferSize: 1000)" executed="True" result="Success" success="True" time="0.1482199" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 1)" executed="True" result="Success" success="True" time="0.0024005" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 4)" executed="True" result="Success" success="True" time="0.0000189" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 15)" executed="True" result="Success" success="True" time="0.0000046" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 65)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 90)" executed="True" result="Success" success="True" time="0.0000032" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 128)" executed="True" result="Success" success="True" time="0.0000036" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 129)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_StreamedHashingEquivalence(bufferSize: 1000)" executed="True" result="Success" success="True" time="0.0000243" />
              <test-case name="FastTests.Sparrow.HashingTests.Marvin32" executed="True" result="Success" success="True" time="0.0008095" />
              <test-case name="FastTests.Sparrow.HashingTests.Marvin32_UseActualValues" executed="True" result="Success" success="True" time="0.0010476" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32" executed="True" result="Success" success="True" time="0.0007048" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_UseActualValues" executed="True" result="Success" success="True" time="0.0020282" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_EquivalenceInDifferentMemoryLocationsXXHash64" executed="True" result="Success" success="True" time="0.0006445" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_EquivalenceInDifferentMemoryLocations" executed="True" result="Success" success="True" time="0.0080661" />
              <test-case name="FastTests.Sparrow.HashingTests.Marvin32_IntArrayEquivalence" executed="True" result="Success" success="True" time="0.0009626" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 1)" executed="True" result="Success" success="True" time="0.0003109" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 4)" executed="True" result="Success" success="True" time="0.0000075" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 15)" executed="True" result="Success" success="True" time="0.0000046" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 65)" executed="True" result="Success" success="True" time="0.0000116" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 90)" executed="True" result="Success" success="True" time="0.0000145" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 128)" executed="True" result="Success" success="True" time="0.0000196" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 129)" executed="True" result="Success" success="True" time="0.0000199" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_IterativeHashingEquivalence(bufferSize: 1000)" executed="True" result="Success" success="True" time="0.0014061" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 1)" executed="True" result="Success" success="True" time="0.0013284" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 4)" executed="True" result="Success" success="True" time="0.0000152" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 15)" executed="True" result="Success" success="True" time="0.0000034" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 65)" executed="True" result="Success" success="True" time="0.0000043" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 90)" executed="True" result="Success" success="True" time="0.0000036" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 128)" executed="True" result="Success" success="True" time="0.0000042" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 129)" executed="True" result="Success" success="True" time="0.0000047" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_StreamedHashingEquivalence(bufferSize: 1000)" executed="True" result="Success" success="True" time="0.0000382" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128" executed="True" result="Success" success="True" time="0.0002774" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_UseLongActualValues" executed="True" result="Success" success="True" time="0.0011446" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_UseActualValues" executed="True" result="Success" success="True" time="0.0015727" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 1)" executed="True" result="Success" success="True" time="0.0026168" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 4)" executed="True" result="Success" success="True" time="0.0000196" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 15)" executed="True" result="Success" success="True" time="0.0000068" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 65)" executed="True" result="Success" success="True" time="0.0000112" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 90)" executed="True" result="Success" success="True" time="0.0000101" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 128)" executed="True" result="Success" success="True" time="0.0000145" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 129)" executed="True" result="Success" success="True" time="0.0000276" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_StreamedHashingEquivalence(bufferSize: 1000)" executed="True" result="Success" success="True" time="0.000078" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_EquivalenceInDifferentMemoryLocations" executed="True" result="Success" success="True" time="0.0005189" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_NotEquivalenceOfBytesWithString" executed="True" result="Success" success="True" time="0.0039927" />
              <test-case name="FastTests.Sparrow.HashingTests.Combine" executed="True" result="Success" success="True" time="0.0001505" />
              <test-case name="FastTests.Sparrow.HashingTests.Metro128_UseActualValues" executed="True" result="Success" success="True" time="0.0010469" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash32_NotEquivalenceOfBytesWithString" executed="True" result="Success" success="True" time="0.0020635" />
              <test-case name="FastTests.Sparrow.HashingTests.XXHash64_NotEquivalenceOfBytesWithString" executed="True" result="Success" success="True" time="0.0004177" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.SortingTests" result="Success" success="True" time="0.997">
            <results>
              <test-case name="FastTests.Sparrow.SortingTests.Small" executed="True" result="Success" success="True" time="0.0027731" />
              <test-case name="FastTests.Sparrow.SortingTests.DifferentSizesWithValues" executed="True" result="Success" success="True" time="0.5076624" />
              <test-case name="FastTests.Sparrow.SortingTests.IncreasingSizes" executed="True" result="Success" success="True" time="0.0664042" />
              <test-case name="FastTests.Sparrow.SortingTests.IncreasingSizesWithValues" executed="True" result="Success" success="True" time="0.1271696" />
              <test-case name="FastTests.Sparrow.SortingTests.SmallWithDuplicates" executed="True" result="Success" success="True" time="0.0008587" />
              <test-case name="FastTests.Sparrow.SortingTests.DifferentSizes" executed="True" result="Success" success="True" time="0.2921383" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8548" result="Success" success="True" time="0.015">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8548.ShouldWork" executed="True" result="Success" success="True" time="0.0150908" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Util.ImmutableAppendOnlyTests" result="Success" success="True" time="0.007">
            <results>
              <test-case name="FastTests.Voron.Util.ImmutableAppendOnlyTests.CanAddAndRemove" executed="True" result="Success" success="True" time="0.006964" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Attachments.AttachmentsSession" result="Success" success="True" time="1.113">
            <results>
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.PutAttachmentAndDeleteShouldThrow" executed="True" result="Success" success="True" time="0.0764089" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.DeleteDocumentAndThanItsAttachments_ThisIsNoOpButShouldBeSupported" executed="True" result="Success" success="True" time="0.1448952" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.DeleteDocumentByCommandAndThanItsAttachments_ThisIsNoOpButShouldBeSupported" executed="True" result="Success" success="True" time="0.0960707" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.GetAttachmentNames" executed="True" result="Success" success="True" time="0.0890843" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.AttachmentExists" executed="True" result="Success" success="True" time="0.1002392" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.ThrowIfStreamIsUseTwice" executed="True" result="Success" success="True" time="0.0603882" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.PutLotOfAttachments(count: 100)" executed="True" result="Success" success="True" time="0.0848628" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.PutDocumentAndAttachmentAndDeleteShouldThrow" executed="True" result="Success" success="True" time="0.0762051" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.DeleteAttachments" executed="True" result="Success" success="True" time="0.1423991" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.ThrowWhenTwoAttachmentsWithTheSameNameInSession" executed="True" result="Success" success="True" time="0.0688034" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.ThrowIfStreamIsDisposed" executed="True" result="Success" success="True" time="0.0715529" />
              <test-case name="FastTests.Client.Attachments.AttachmentsSession.PutAttachments" executed="True" result="Success" success="True" time="0.1019543" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries" result="Success" success="True" time="1.074">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Group_by_string_calculate_count" executed="True" result="Success" success="True" time="0.170856" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Group_by_number" executed="True" result="Success" success="True" time="0.1422119" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Group_by_nested_field_sum_on_collection" executed="True" result="Success" success="True" time="0.1602895" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Order_by_string_integer_and_decimal_fields" executed="True" result="Success" success="True" time="0.2136885" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Group_by_string_calculate_sum" executed="True" result="Success" success="True" time="0.179557" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Group_by_does_not_support_custom_equality_comparer" executed="True" result="Success" success="True" time="0.063753" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.BasicDynamicMapReduceQueries.Can_project_in_map_reduce" executed="True" result="Success" success="True" time="0.1435419" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.TranslatingLinqQueriesToIndexes" result="Success" success="True" time="0.028">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.TranslatingLinqQueriesToIndexes.WillTranslateReferenceToIdTo__document_id" executed="True" result="Success" success="True" time="0.0036645" />
              <test-case name="FastTests.Server.Documents.Indexing.TranslatingLinqQueriesToIndexes.WillTranslateProperlyBothRootAndChild" executed="True" result="Success" success="True" time="0.0100309" />
              <test-case name="FastTests.Server.Documents.Indexing.TranslatingLinqQueriesToIndexes.WillTranslateAnonymousArray" executed="True" result="Success" success="True" time="0.0103292" />
              <test-case name="FastTests.Server.Documents.Indexing.TranslatingLinqQueriesToIndexes.WillNotTranslateIdTo__document_idIfNotOnRootEntity" executed="True" result="Success" success="True" time="0.0038738" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Static.DynamicBlittableJsonTests" result="Success" success="True" time="0.054">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Static.DynamicBlittableJsonTests.Can_get_simple_values" executed="True" result="Success" success="True" time="0.0537975" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.Files" result="Success" success="True" time="1.045">
            <results>
              <test-case name="FastTests.Voron.Storage.Files.ByDefaultAllFilesShouldBeStoredInOneDirectory" executed="True" result="Success" success="True" time="0.2437747" />
              <test-case name="FastTests.Voron.Storage.Files.ScratchLocationWithTemporaryPathSpecified" executed="True" result="Success" success="True" time="0.3442503" />
              <test-case name="FastTests.Voron.Storage.Files.TemporaryPathTest" executed="True" result="Success" success="True" time="0.2158029" />
              <test-case name="FastTests.Voron.Storage.Files.DefaultScratchLocation" executed="True" result="Success" success="True" time="0.2411903" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_7384" result="Success" success="True" time="0.258">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_7384.DisablingDatabaseShouldCutConnection" executed="True" result="Success" success="True" time="0.1227253" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_7384.UpdatingSubscriptionScriptShouldNotChangeVectorButShouldDropConnection" executed="True" result="Success" success="True" time="0.1351005" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.SubscriptionScriptErrorHandling" result="Success" success="True" time="0.257">
            <results>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScriptErrorHandling.ValidateFailedSubscriptionScriptExceptionHandling" executed="True" result="Success" success="True" time="0.1173413" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScriptErrorHandling.ValidateFailedRevisionsSubscriptionScriptExceptionHandling" executed="True" result="Success" success="True" time="0.1394259" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Documents.Load" result="Success" success="True" time="0.220">
            <results>
              <test-case name="FastTests.Client.Documents.Load.LoadWithIncludes" executed="True" result="Success" success="True" time="0.1210004" />
              <test-case name="FastTests.Client.Documents.Load.LoadWithIncludesAndMissingDocument" executed="True" result="Success" success="True" time="0.0986007" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueryAsync" result="Success" success="True" time="0.458">
            <results>
              <test-case name="FastTests.Client.QueryAsync.QueryAsync_Simple" executed="True" result="Success" success="True" time="0.0912752" />
              <test-case name="FastTests.Client.QueryAsync.QueryAsync_With_Where_Clause" executed="True" result="Success" success="True" time="0.1401781" />
              <test-case name="FastTests.Client.QueryAsync.QueryAsync_By_Index" executed="True" result="Success" success="True" time="0.226614" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_8404" result="Success" success="True" time="0.952">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportStartsWithWithEscapedValues" executed="True" result="Success" success="True" time="0.1160109" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportExists" executed="True" result="Success" success="True" time="0.1238448" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportIntersect" executed="True" result="Success" success="True" time="0.1252951" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportEndsWith" executed="True" result="Success" success="True" time="0.1622452" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportRegex" executed="True" result="Success" success="True" time="0.1041606" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportStartsWith" executed="True" result="Success" success="True" time="0.1056911" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportIntersectWithComplexRegex" executed="True" result="Success" success="True" time="0.1013832" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8404.SubscriptionsRQLSupportEscapedValue" executed="True" result="Success" success="True" time="0.1136789" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.ItemCount" result="Success" success="True" time="0.509">
            <results>
              <test-case name="FastTests.Voron.Trees.ItemCount.ItemCountIsConsistentWithUpdates" executed="True" result="Success" success="True" time="0.259258" />
              <test-case name="FastTests.Voron.Trees.ItemCount.ItemCountIsConsistentWithAdditionsAndRemovals" executed="True" result="Success" success="True" time="0.2497469" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.RavenDB_8713" result="Success" success="True" time="0.556">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8713.CanQueryOnCaseSensitiveFields_UsingSearch" executed="True" result="Success" success="True" time="0.1387823" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8713.CanQueryOnCaseSensitiveGroupByFields" executed="True" result="Success" success="True" time="0.1344502" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8713.CanQueryOnCaseSensitiveFields" executed="True" result="Success" success="True" time="0.1268202" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_8713.ShouldExtendMappingDueToCaseSensitiveFields" executed="True" result="Success" success="True" time="0.155711" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.LoadIntoStream" result="Success" success="True" time="0.190">
            <results>
              <test-case name="FastTests.Client.LoadIntoStream.CanLoadByIdsIntoStream" executed="True" result="Success" success="True" time="0.0864914" />
              <test-case name="FastTests.Client.LoadIntoStream.CanLoadStartingWithIntoStream" executed="True" result="Success" success="True" time="0.1039688" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.RawData.SmallDataSection" result="Success" success="True" time="1.973">
            <results>
              <test-case name="FastTests.Voron.RawData.SmallDataSection.CanReadAndWriteFromSection_AfterFlush" executed="True" result="Success" success="True" time="0.2474331" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.CanAllocateMultipleValues(seed: 1282277690)" executed="True" result="Success" success="True" time="0.2583642" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.CanAllocateEnoughToFillEntireSection" executed="True" result="Success" success="True" time="0.2428135" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.WhatShouldWeDoHere" executed="True" result="Success" success="True" time="0.2580976" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.CanReadAndWriteFromSection" executed="True" result="Success" success="True" time="0.2342258" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.ShouldNotReturnMoreIdsThanTotalNumberOfEntriesInSection" executed="True" result="Success" success="True" time="0.2443137" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.CanReadAndWriteFromSection_SingleTx" executed="True" result="Success" success="True" time="0.2407501" />
              <test-case name="FastTests.Voron.RawData.SmallDataSection.ShouldReturnValidIdsOfEntriesInSectionThatAreReadable" executed="True" result="Success" success="True" time="0.2473726" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.RavenDB_8325" result="Success" success="True" time="0.128">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.RavenDB_8325.Numeric_values_should_to_be_sorted_lexically_if_not_specified_explicitly" executed="True" result="Success" success="True" time="0.1283114" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.PtrBitVectorTests" result="Success" success="True" time="0.002">
            <results>
              <test-case name="FastTests.Sparrow.PtrBitVectorTests.SetIndex" executed="True" result="Success" success="True" time="0.0019615" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6250" result="Success" success="True" time="0.017">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6250.All_performance_hints_has_details_providers" executed="True" result="Success" success="True" time="0.0083586" />
              <test-case name="FastTests.Issues.RavenDB_6250.All_operations_has_details_providers" executed="True" result="Success" success="True" time="0.0082418" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.Raven_9387" result="Success" success="True" time="0.000">
            <results>
              <test-case name="FastTests.Issues.Raven_9387.GivenPathStartingWithHomeShouldReplaceThatWithUserDir" executed="False" result="Skipped" time="0">
                <reason>
                  <message>Test can be run only on Linux machine</message>
                </reason>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9103" result="Success" success="True" time="0.229">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9103.ProjectingFromIndexFieldWithGroupPropertyShouldWork" executed="True" result="Success" success="True" time="0.2294311" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.RavenDB_8806" result="Success" success="True" time="0.203">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.RavenDB_8806.Can_stream_dynamic_query" executed="True" result="Success" success="True" time="0.2032312" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.LoadIntoStreamAsync" result="Success" success="True" time="0.207">
            <results>
              <test-case name="FastTests.Client.LoadIntoStreamAsync.CanLoadStartingWithIntoStreamAsync" executed="True" result="Success" success="True" time="0.1086402" />
              <test-case name="FastTests.Client.LoadIntoStreamAsync.CanLoadByIdsIntoStreamAsync" executed="True" result="Success" success="True" time="0.0983802" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9519" result="Success" success="True" time="0.243">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9519.NestedObjectShouldBeExportedAndImportedProperly" executed="True" result="Success" success="True" time="0.2434494" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7693" result="Success" success="True" time="0.098">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7693.SaveEntityWithEmptyListAfterLoad" executed="True" result="Success" success="True" time="0.0977164" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_3491" result="Success" success="True" time="0.600">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3491.StronglyTypedSubscribtionWithStartEtag" executed="True" result="Success" success="True" time="0.1025082" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3491.SubscribtionWithEtag" executed="True" result="Success" success="True" time="0.1239608" />
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3491.SubscribtionWithEtag_MultipleOpens" executed="True" result="Success" success="True" time="0.3737108" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.BigValues" result="Success" success="True" time="3.041">
            <results>
              <test-case name="FastTests.Voron.Storage.BigValues.CanStoreInOneTransactionManySmallValues" executed="True" result="Success" success="True" time="0.8263373" />
              <test-case name="FastTests.Voron.Storage.BigValues.CanReuseLargeSpace(restartCount: 0)" executed="True" result="Success" success="True" time="0.3956393" />
              <test-case name="FastTests.Voron.Storage.BigValues.CanReuseLargeSpace(restartCount: 1)" executed="True" result="Success" success="True" time="0.4231589" />
              <test-case name="FastTests.Voron.Storage.BigValues.CanReuseLargeSpace(restartCount: 2)" executed="True" result="Success" success="True" time="0.4353124" />
              <test-case name="FastTests.Voron.Storage.BigValues.CanReuseLargeSpace(restartCount: 3)" executed="True" result="Success" success="True" time="0.4920424" />
              <test-case name="FastTests.Voron.Storage.BigValues.CanReuseLargeSpace(restartCount: 4)" executed="True" result="Success" success="True" time="0.4687609" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.RavenDB_8257" result="Success" success="True" time="0.403">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.RavenDB_8257.ReduceIndexProjectionWithStoredFields" executed="True" result="Success" success="True" time="0.267024" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenDB_8257.ReduceIndexProjectionWithoutStoredFields" executed="True" result="Success" success="True" time="0.1358316" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8220" result="Success" success="True" time="0.145">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8220.CanGenerateIndexesWithTheSame64CharPrefix" executed="True" result="Success" success="True" time="0.1449104" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.Map.DynamicQueriesEnumsNestedFieldsAndCollections" result="Success" success="True" time="0.441">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.DynamicQueriesEnumsNestedFieldsAndCollections.Query_on_nested_field" executed="True" result="Success" success="True" time="0.1321273" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.DynamicQueriesEnumsNestedFieldsAndCollections.Query_on_enum" executed="True" result="Success" success="True" time="0.1334108" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.DynamicQueriesEnumsNestedFieldsAndCollections.Query_on_collection" executed="True" result="Success" success="True" time="0.1753472" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueriesWithVariables" result="Success" success="True" time="0.439">
            <results>
              <test-case name="FastTests.Client.QueriesWithVariables.Query_With_Variables" executed="True" result="Success" success="True" time="0.1311587" />
              <test-case name="FastTests.Client.QueriesWithVariables.Query_With_Variables_IntoClass" executed="True" result="Success" success="True" time="0.1280144" />
              <test-case name="FastTests.Client.QueriesWithVariables.Query_With_Simple_Constants_IntoClass" executed="True" result="Success" success="True" time="0.0986802" />
              <test-case name="FastTests.Client.QueriesWithVariables.Query_With_Simple_Constants" executed="True" result="Success" success="True" time="0.0810691" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Parser.ParserTests" result="Success" success="True" time="0.017">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.FailToParseInvalidJavascript(q: \&quot;from Orders\\r\\nselect ID('not valid argument')\&quot;, type: Select)" executed="True" result="Success" success="True" time="0.0010134" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.FailToParseInvalidJavascript(q: \&quot;declare function Name() {\\r\\n    var a = 's{tri}}}\&quot;..., type: Select)" executed="True" result="Success" success="True" time="0.0023521" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.FailToParseInvalidJavascript(q: \&quot;declare function Name() {\\r\\n   var a = ;\\r\\n}\\r\\n\&quot;..., type: Select)" executed="True" result="Success" success="True" time="0.0002946" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.FailToParseInvalidJavascript(q: \&quot;\\r\\nfrom Orders as o\\r\\nupdate { \\r\\n    this.++;\\\&quot;..., type: Update)" executed="True" result="Success" success="True" time="0.0001734" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseParameter(q: \&quot; $name \&quot;, len: 4)" executed="True" result="Success" success="True" time="0.0007139" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseParameter(q: \&quot;$age \&quot;, len: 3)" executed="True" result="Success" success="True" time="0.0000061" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseQueries(q: \&quot;\\r\\ndeclare function Name() {\\r\\n    var a = \\\&quot;{{\\\&quot;..., type: Select)" executed="True" result="Success" success="True" time="0.0003069" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseQueries(q: \&quot;FROM INDEX 'Orders/Totals' \\r\\nWHERE Employee = $e\&quot;..., type: Update)" executed="True" result="Success" success="True" time="0.0000629" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;Name = 'Oren'\&quot;, type: Equal)" executed="True" result="Success" success="True" time="0.003783" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;Name &lt; 'Oren'\&quot;, type: LessThan)" executed="True" result="Success" success="True" time="0.0000823" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;Name &lt;= 'Oren'\&quot;, type: LessThanEqual)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;Name &gt; 'Oren'\&quot;, type: GreaterThan)" executed="True" result="Success" success="True" time="0.0000025" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;Name &gt;= 'Oren'\&quot;, type: GreaterThanEqual)" executed="True" result="Success" success="True" time="0.0000025" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;State = 2 AND Act = 'Wait'\&quot;, type: And)" executed="True" result="Success" success="True" time="0.0000036" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;(State = 2 OR Act = 'Wait')\&quot;, type: Or)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;(State = 2 OR Act = 'Wait') OR NOT User = 'Admin'\&quot;, type: OrNot)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParse(q: \&quot;State = 2 AND NOT (User = 'Admin' OR User ='Root')\&quot;, type: AndNot)" executed="True" result="Success" success="True" time="0.0000047" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;Name =     'Oren'\&quot;, o: \&quot;Name = 'Oren'\&quot;)" executed="True" result="Success" success="True" time="0.0030997" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;Name between \\n'Oren' AND 'Phoebe'\&quot;, o: \&quot;Name BETWEEN 'Oren' AND 'Phoebe'\&quot;)" executed="True" result="Success" success="True" time="0.0001775" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;( Name between 'Oren' AND 'Phoebe' )\&quot;, o: \&quot;Name BETWEEN 'Oren' AND 'Phoebe'\&quot;)" executed="True" result="Success" success="True" time="0.0000116" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;Name IN ()\&quot;, o: \&quot;Name IN ()\&quot;)" executed="True" result="Success" success="True" time="0.0004345" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;(Name IN ())\&quot;, o: \&quot;Name IN ()\&quot;)" executed="True" result="Success" success="True" time="0.0000148" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;Age in (23,48)\&quot;, o: \&quot;Age IN (23, 48)\&quot;)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;(Status in ('Active', 'Passive'))\&quot;, o: \&quot;Status IN ('Active', 'Passive')\&quot;)" executed="True" result="Success" success="True" time="0.0000046" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;State = 2 AND Act = 'Wait'\&quot;, o: \&quot;(State = 2 AND Act = 'Wait')\&quot;)" executed="True" result="Success" success="True" time="0.0003156" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;(State = 2 OR Act = 'Wait') OR NOT User = 'Admin'\&quot;, o: \&quot;((State = 2 OR Act = 'Wait') OR NOT User = 'Admin'\&quot;...)" executed="True" result="Success" success="True" time="0.0000156" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;State = 2 AND NOT (User = 'Admin' OR User = 'Root'\&quot;..., o: \&quot;(State = 2 AND NOT (User = 'Admin' OR User = 'Root\&quot;...)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;boost()\&quot;, o: \&quot;boost()\&quot;)" executed="True" result="Success" success="True" time="0.0005341" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;boost( User = 'Admin' )\&quot;, o: \&quot;boost(User = 'Admin')\&quot;)" executed="True" result="Success" success="True" time="0.000013" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWrite(q: \&quot;boost(User = 'Admin' OR User = 'Root', 2)\&quot;, o: \&quot;boost((User = 'Admin' OR User = 'Root'), 2)\&quot;)" executed="True" result="Success" success="True" time="0.0000064" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;State = 2 AND Act = 'Wait'\&quot;, o: \&quot;{\\\&quot;Type\\\&quot;:\\\&quot;And\\\&quot;,\\\&quot;Left\\\&quot;:{\\\&quot;Type\\\&quot;:\\\&quot;Equal\\\&quot;,\\\&quot;L\&quot;...)" executed="True" result="Success" success="True" time="0.0018503" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;( Name between 'Oren' AND 'Phoebe' )\&quot;, o: \&quot;{\\\&quot;Between\\\&quot;:{\\\&quot;Min\\\&quot;:\\\&quot;Oren\\\&quot;,\\\&quot;Max\\\&quot;:\\\&quot;Phoebe\\\&quot;}\&quot;...)" executed="True" result="Success" success="True" time="0.0001863" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;Name IN ()\&quot;, o: \&quot;{\\\&quot;In\\\&quot;:[]}\&quot;)" executed="True" result="Success" success="True" time="0.0004225" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;Age in (23,48)\&quot;, o: \&quot;{\\\&quot;In\\\&quot;:[23,48]}\&quot;)" executed="True" result="Success" success="True" time="0.0000141" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;State = 2 AND NOT (User = 'Admin' OR User = 'Root'\&quot;..., o: \&quot;{\\\&quot;Type\\\&quot;:\\\&quot;AndNot\\\&quot;,\\\&quot;Left\\\&quot;:{\\\&quot;Type\\\&quot;:\\\&quot;Equal\\\&quot;,\&quot;...)" executed="True" result="Success" success="True" time="0.0000097" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;Name =     'Oren'\&quot;, o: \&quot;{\\\&quot;Type\\\&quot;:\\\&quot;Equal\\\&quot;,\\\&quot;Left\\\&quot;:\\\&quot;Name\\\&quot;,\\\&quot;Right\\\&quot;:\\\&quot;\&quot;...)" executed="True" result="Success" success="True" time="0.0000035" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;boost()\&quot;, o: \&quot;{\\\&quot;Method\\\&quot;:\\\&quot;boost\\\&quot;,\\\&quot;Arguments\\\&quot;:[]}\&quot;)" executed="True" result="Success" success="True" time="0.000483" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;(State = 2 OR Act = 'Wait') OR NOT User = 'Admin'\&quot;, o: \&quot;{\\\&quot;Type\\\&quot;:\\\&quot;OrNot\\\&quot;,\\\&quot;Left\\\&quot;:{\\\&quot;Type\\\&quot;:\\\&quot;Or\\\&quot;,\\\&quot;Le\&quot;...)" executed="True" result="Success" success="True" time="0.0000141" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;boost(User = 'Admin' OR User = 'Root', 2)\&quot;, o: \&quot;{\\\&quot;Method\\\&quot;:\\\&quot;boost\\\&quot;,\\\&quot;Arguments\\\&quot;:[{\\\&quot;Type\\\&quot;:\\\&quot;O\&quot;...)" executed="True" result="Success" success="True" time="0.0000247" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;(Name IN ())\&quot;, o: \&quot;{\\\&quot;In\\\&quot;:[]}\&quot;)" executed="True" result="Success" success="True" time="0.0000035" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;(Status in ('Active', 'Passive'))\&quot;, o: \&quot;{\\\&quot;In\\\&quot;:[\\\&quot;Active\\\&quot;,\\\&quot;Passive\\\&quot;]}\&quot;)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;Name between 'Oren' AND 'Phoebe'\&quot;, o: \&quot;{\\\&quot;Between\\\&quot;:{\\\&quot;Min\\\&quot;:\\\&quot;Oren\\\&quot;,\\\&quot;Max\\\&quot;:\\\&quot;Phoebe\\\&quot;}\&quot;...)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.ParseAndWriteAst(q: \&quot;boost( User = 'Admin' )\&quot;, o: \&quot;{\\\&quot;Method\\\&quot;:\\\&quot;boost\\\&quot;,\\\&quot;Arguments\\\&quot;:[{\\\&quot;Type\\\&quot;:\\\&quot;E\&quot;...)" executed="True" result="Success" success="True" time="0.0000047" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;Name\&quot;)" executed="True" result="Success" success="True" time="0.0003638" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;Address.City\&quot;)" executed="True" result="Success" success="True" time="0.0000079" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;Address.City.Zone\&quot;)" executed="True" result="Success" success="True" time="0.0000017" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;Tags[]\&quot;)" executed="True" result="Success" success="True" time="0.0000064" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;Tags[].'Basic Units'\&quot;)" executed="True" result="Success" success="True" time="0.0000021" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ParserTests.CanParseField(q: \&quot;'Basic Units'.Tricolor \&quot;)" executed="True" result="Success" success="True" time="0.0000013" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Documents.BasicDocuments" result="Success" success="True" time="0.280">
            <results>
              <test-case name="FastTests.Client.Documents.BasicDocuments.CanStoreAnonymousObject" executed="True" result="Success" success="True" time="0.0805236" />
              <test-case name="FastTests.Client.Documents.BasicDocuments.CanChangeDocumentCollectionWithDeleteAndSave" executed="True" result="Success" success="True" time="0.1099716" />
              <test-case name="FastTests.Client.Documents.BasicDocuments.GetAsync" executed="True" result="Success" success="True" time="0.0894092" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.RavenDB_9535" result="Success" success="True" time="0.001">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.RavenDB_9535.Invalid_hash_calculation_on_null" executed="True" result="Success" success="True" time="0.0012657" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.ScratchBuffer.ScratchCanForceToFlushOldPages" result="Success" success="True" time="0.266">
            <results>
              <test-case name="FastTests.Voron.ScratchBuffer.ScratchCanForceToFlushOldPages.CanForceToFlushPagesOlderThanOldestActiveTransactionToFreePagesFromScratch" executed="True" result="Success" success="True" time="0.2658979" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Patching.AdvancedPatching" result="Success" success="True" time="3.843">
            <results>
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanOutputDebugInformation" executed="True" result="Success" success="True" time="0.0961953" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanRemoveFromCollectionByCondition" executed="True" result="Success" success="True" time="0.0967252" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanCreateMultipleDocuments" executed="True" result="Success" success="True" time="0.1288041" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanHandleNonsensePatching" executed="True" result="Success" success="True" time="0.1125873" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.ComplexVariableTest" executed="True" result="Success" success="True" time="0.0996339" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUseToISOString" executed="True" result="Success" success="True" time="0.106168" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanPerformAdvancedPatching" executed="True" result="Success" success="True" time="0.1358199" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanApplyBasicScriptAsPatch" executed="True" result="Success" success="True" time="0.094542" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanPatchUsingVars" executed="True" result="Success" success="True" time="0.0919523" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanPatchMetadata" executed="True" result="Success" success="True" time="0.0949383" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUseTrim" executed="True" result="Success" success="True" time="0.1006389" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanPatchUsingRavenJObjectVars" executed="True" result="Success" success="True" time="0.0973663" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CannotUseInfiniteLoop" executed="True" result="Success" success="True" time="0.1024265" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanCreateDocumentsIfPatchingAppliedByIndex" executed="True" result="Success" success="True" time="0.2594666" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUpdateOnMissingProperty" executed="True" result="Success" success="True" time="0.1081042" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanDeserializeModifiedDocument" executed="True" result="Success" success="True" time="0.1754927" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanDoPatchIfMissing" executed="True" result="Success" success="True" time="0.0849267" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUseSplit" executed="True" result="Success" success="True" time="0.0947176" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanOutputNestedDebugInformation" executed="True" result="Success" success="True" time="0.1186257" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.WillNotErrorOnMissingDocument" executed="True" result="Success" success="True" time="0.0711048" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CreateDocumentShouldThrowInvalidEtagException" executed="True" result="Success" success="True" time="0.1042193" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanThrowIfValueIsWrong" executed="True" result="Success" success="True" time="0.0867113" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUpdateBasedOnAnotherDocumentProperty" executed="True" result="Success" success="True" time="0.0900736" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUpdateDocument" executed="True" result="Success" success="True" time="0.1045176" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CreateDocumentWillNotThrowIfEmptyKeyProvided" executed="True" result="Success" success="True" time="0.0990026" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.PreventRecursion" executed="True" result="Success" success="True" time="0.125302" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.ShouldThrowConcurrencyExceptionIfNonCurrentEtagWasSpecified" executed="True" result="Success" success="True" time="0.0930741" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanRemoveFromCollectionByValue" executed="True" result="Success" success="True" time="0.1022102" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CreateDocumentShouldThrowIfSpecifiedJsonIsNullOrEmptyString" executed="True" result="Success" success="True" time="0.086866" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.ComplexVariableTest2" executed="True" result="Success" success="True" time="0.0899558" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanCreateDocument" executed="True" result="Success" success="True" time="0.1069699" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanPerformAdvancedWithSetBasedUpdates" executed="True" result="Success" success="True" time="0.2874811" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanCreateEmptyDocument" executed="True" result="Success" success="True" time="0.0966625" />
              <test-case name="FastTests.Server.Documents.Patching.AdvancedPatching.CanUseMathFloor" executed="True" result="Success" success="True" time="0.1001801" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.CriteriaScript" result="Success" success="True" time="0.337">
            <results>
              <test-case name="FastTests.Client.Subscriptions.CriteriaScript.CriteriaScriptWithTransformation(useSsl: False)" executed="True" result="Success" success="True" time="0.1812469" />
              <test-case name="FastTests.Client.Subscriptions.CriteriaScript.BasicCriteriaTest(useSsl: False)" executed="True" result="Success" success="True" time="0.1562492" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB9158" result="Success" success="True" time="0.201">
            <results>
              <test-case name="FastTests.Issues.RavenDB9158.Raven_Should_Throw_Concurrency_Exception_When_Using_Loaded_Entity_And_Specific_Change_Vector" executed="True" result="Success" success="True" time="0.1057724" />
              <test-case name="FastTests.Issues.RavenDB9158.Raven_Should_Throw_Concurrency_Exception_When_Using_Loaded_Entity_From_Different_Session_And_Specific_Change_Vector" executed="True" result="Success" success="True" time="0.0956611" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.LazyTransactionsRespectPageBoundaries" result="Success" success="True" time="0.308">
            <results>
              <test-case name="FastTests.Voron.LazyTransactionsRespectPageBoundaries.CanSyncWhenLazyTransactionsHasBufferedMultipleTransactions" executed="True" result="Success" success="True" time="0.3079261" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Store" result="Success" success="True" time="0.257">
            <results>
              <test-case name="FastTests.Client.Store.Store_Documents" executed="True" result="Success" success="True" time="0.0775756" />
              <test-case name="FastTests.Client.Store.Store_Document" executed="True" result="Success" success="True" time="0.0771792" />
              <test-case name="FastTests.Client.Store.Refresh_stored_document" executed="True" result="Success" success="True" time="0.10211" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.Quotas" result="Success" success="True" time="0.305">
            <results>
              <test-case name="FastTests.Voron.Storage.Quotas.ShouldThrowQuotaException" executed="True" result="Success" success="True" time="0.3045033" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.WhatChanged" result="Success" success="True" time="0.687">
            <results>
              <test-case name="FastTests.Client.WhatChanged.What_Changed_Removed_Field" executed="True" result="Success" success="True" time="0.0843559" />
              <test-case name="FastTests.Client.WhatChanged.What_Changed_Array_Value_Added" executed="True" result="Success" success="True" time="0.0765402" />
              <test-case name="FastTests.Client.WhatChanged.What_Changed_Change_Field" executed="True" result="Success" success="True" time="0.0812628" />
              <test-case name="FastTests.Client.WhatChanged.RavenDB_8169" executed="True" result="Success" success="True" time="0.0942998" />
              <test-case name="FastTests.Client.WhatChanged.What_Changed_Array_Value_Changed" executed="True" result="Success" success="True" time="0.0889457" />
              <test-case name="FastTests.Client.WhatChanged.What_Changed_New_Field" executed="True" result="Success" success="True" time="0.0878174" />
              <test-case name="FastTests.Client.WhatChanged.WhatChanged_should_be_idempotent_operation" executed="True" result="Success" success="True" time="0.0864554" />
              <test-case name="FastTests.Client.WhatChanged.What_Changed_Array_Value_Removed" executed="True" result="Success" success="True" time="0.0869786" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Bugs.RavenDB_8036" result="Success" success="True" time="0.581">
            <results>
              <test-case name="FastTests.Voron.Bugs.RavenDB_8036.Flushing_should_not_throw_on_freeing_scratch_page" executed="True" result="Success" success="True" time="0.2890124" />
              <test-case name="FastTests.Voron.Bugs.RavenDB_8036.Flushing_should_not_throw_on_freeing_scratch_page_async_commit" executed="True" result="Success" success="True" time="0.2920719" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.BloomFilterTests" result="Success" success="True" time="1.822">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.Basic" executed="True" result="Success" success="True" time="0.3006334" />
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.WillExpand" executed="True" result="Success" success="True" time="0.3471503" />
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.CheckReadonly" executed="True" result="Success" success="True" time="0.2945769" />
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.CannotMixFilters" executed="True" result="Success" success="True" time="0.2986952" />
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.CheckWriteability" executed="True" result="Success" success="True" time="0.2962121" />
              <test-case name="FastTests.Server.Documents.Indexing.BloomFilterTests.CanPersist" executed="True" result="Success" success="True" time="0.2848503" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.SmallStringCompressionTests" result="Success" success="True" time="0.002">
            <results>
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;this is a sample string\&quot;)" executed="True" result="Success" success="True" time="0.0005891" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;here is a funny story I have heard\&quot;)" executed="True" result="Success" success="True" time="0.0000162" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;who is here, and who is there, who is everywhere?\&quot;)" executed="True" result="Success" success="True" time="0.0000101" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;https://ravendb.net\&quot;)" executed="True" result="Success" success="True" time="0.0000032" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;noreply@example.com\&quot;)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;See: here\&quot;)" executed="True" result="Success" success="True" time="0.0000025" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.RoundTrip(s: \&quot;בארזים נפלה שלהבת\&quot;)" executed="True" result="Success" success="True" time="0.0000087" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferCompression(s: \&quot;this is a sample string\&quot;)" executed="True" result="Success" success="True" time="0.0004736" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferCompression(s: \&quot;בארזים נפלה שלהבת\&quot;)" executed="True" result="Success" success="True" time="0.000009" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.SmallerForThoseValues(s: \&quot;this is a sample string\&quot;)" executed="True" result="Success" success="True" time="0.0004379" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.SmallerForThoseValues(s: \&quot;here is a funny story I have heard\&quot;)" executed="True" result="Success" success="True" time="0.0000221" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.SmallerForThoseValues(s: \&quot;who is here, and who is there, who is everywhere?\&quot;)" executed="True" result="Success" success="True" time="0.0000047" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.SmallerForThoseValues(s: \&quot;https://ravendb.net\&quot;)" executed="True" result="Success" success="True" time="0.0000031" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.SmallerForThoseValues(s: \&quot;noreply@example.com\&quot;)" executed="True" result="Success" success="True" time="0.0000032" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;this is a sample string\&quot;)" executed="True" result="Success" success="True" time="0.0006472" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;here is a funny story I have heard\&quot;)" executed="True" result="Success" success="True" time="0.0000166" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;who is here, and who is there, who is everywhere?\&quot;)" executed="True" result="Success" success="True" time="0.0000236" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;https://ravendb.net\&quot;)" executed="True" result="Success" success="True" time="0.0000028" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;noreply@example.com\&quot;)" executed="True" result="Success" success="True" time="0.0000076" />
              <test-case name="FastTests.Blittable.SmallStringCompressionTests.CanHandleSmallBufferDecompression(s: \&quot;בארזים נפלה שלהבת\&quot;)" executed="True" result="Success" success="True" time="0.0000076" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests" result="Success" success="True" time="2.052">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidSideBySideIndexingWithoutClearingTheOutputReduceToCollectionValueFirst" executed="True" result="Success" success="True" time="0.2565397" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidOutputReduceDocumentsInAInfiniteLoopCausedByLoadDocument" executed="True" result="Success" success="True" time="0.3662245" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidOutputReduceDocumentsToExistingCollectionWhichHaveDocuments" executed="True" result="Success" success="True" time="0.1860901" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.LetTheUserModifyTheIndex" executed="True" result="Success" success="True" time="0.586588" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidOutputReduceDocumentsOnTheDocumentsWeLoadInMap" executed="True" result="Success" success="True" time="0.1490549" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidOutputReduceDocumentsInAInfiniteLoop" executed="True" result="Success" success="True" time="0.1446819" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ReduceResultsBackAsDocuments" executed="True" result="Success" success="True" time="0.2784825" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.OutputReduceToCollectionTests.ForbidOutputReduceDocumentsOnTheDocumentsWeMap" executed="True" result="Success" success="True" time="0.084683" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.TreeRenaming" result="Success" success="True" time="1.547">
            <results>
              <test-case name="FastTests.Voron.Trees.TreeRenaming.ShouldThrowIfTreeDoesNotExist" executed="True" result="Success" success="True" time="0.3248243" />
              <test-case name="FastTests.Voron.Trees.TreeRenaming.ShouldPreventFromRenamingTreeInReadTransaction" executed="True" result="Success" success="True" time="0.3014965" />
              <test-case name="FastTests.Voron.Trees.TreeRenaming.CanRenameTree" executed="True" result="Success" success="True" time="0.3114251" />
              <test-case name="FastTests.Voron.Trees.TreeRenaming.MustNotRenameToRootAndFreeSpaceRootTrees" executed="True" result="Success" success="True" time="0.3154842" />
              <test-case name="FastTests.Voron.Trees.TreeRenaming.ShouldNotAllowToRenameTreeIfTreeAlreadyExists" executed="True" result="Success" success="True" time="0.2937623" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.StorageReportGenerationTests" result="Success" success="True" time="7.656">
            <results>
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.JournalReportsArePresent(numberOfTrees: 0)" executed="True" result="Success" success="True" time="0.3164317" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.JournalReportsArePresent(numberOfTrees: 7)" executed="True" result="Success" success="True" time="0.3012511" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.JournalReportsArePresent(numberOfTrees: 14)" executed="True" result="Success" success="True" time="0.3051301" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.AllocatedSpaceOfDataFileEqualsToSumOfSpaceInUseAndFreeSpace" executed="True" result="Success" success="True" time="0.2844872" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutPagesUsedByFixedSizeTrees(numberOfFixedSizeTrees: 1)" executed="True" result="Success" success="True" time="0.3740919" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutPagesUsedByFixedSizeTrees(numberOfFixedSizeTrees: 5)" executed="True" result="Success" success="True" time="0.2972886" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutPagesUsedByFixedSizeTrees(numberOfFixedSizeTrees: 15)" executed="True" result="Success" success="True" time="0.3016377" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutPagesOfChildMultiTrees" executed="True" result="Success" success="True" time="0.3429445" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key\&quot;], numberOfValuesPerKey: 1000)" executed="True" result="Success" success="True" time="0.3064474" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key1\&quot;, \&quot;key2\&quot;], numberOfValuesPerKey: 1000)" executed="True" result="Success" success="True" time="0.3111845" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key\&quot;], numberOfValuesPerKey: 1)" executed="True" result="Success" success="True" time="0.2949164" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key1\&quot;, \&quot;key2\&quot;], numberOfValuesPerKey: 2)" executed="True" result="Success" success="True" time="0.298966" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key\&quot;], numberOfValuesPerKey: 30)" executed="True" result="Success" success="True" time="0.2960235" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInformationAboutMultiValueEntries(keys: [\&quot;key1\&quot;, \&quot;key2\&quot;], numberOfValuesPerKey: 30)" executed="True" result="Success" success="True" time="0.2895604" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutStreams(numberOfStreams: 5, seed: 1390075326)" executed="True" result="Success" success="True" time="0.3723633" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutStreams(numberOfStreams: 1, seed: 964698722)" executed="True" result="Success" success="True" time="0.3088119" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutStreams(numberOfStreams: 5, seed: 2086598541)" executed="True" result="Success" success="True" time="0.3594149" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportContainsInfoAboutStreams(numberOfStreams: 15, seed: 1061014713)" executed="True" result="Success" success="True" time="0.4912131" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsContainCompleteInformationAboutAllExistingTrees(numberOfTrees: 0)" executed="True" result="Success" success="True" time="0.3031627" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsContainCompleteInformationAboutAllExistingTrees(numberOfTrees: 1)" executed="True" result="Success" success="True" time="0.2935401" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsContainCompleteInformationAboutAllExistingTrees(numberOfTrees: 13)" executed="True" result="Success" success="True" time="0.297252" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsAreEmptyAfterRemovingAllEntries(numberOfTrees: 0)" executed="True" result="Success" success="True" time="0.2946257" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsAreEmptyAfterRemovingAllEntries(numberOfTrees: 7)" executed="True" result="Success" success="True" time="0.3010921" />
              <test-case name="FastTests.Voron.Storage.StorageReportGenerationTests.TreeReportsAreEmptyAfterRemovingAllEntries(numberOfTrees: 14)" executed="True" result="Success" success="True" time="0.314605" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.DiffPagesTests" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Sparrow.DiffPagesTests.Applying_diff_calculated_as_new_multiple_times" executed="True" result="Success" success="True" time="0.0031477" />
              <test-case name="FastTests.Sparrow.DiffPagesTests.CanComputeSmallDifference" executed="True" result="Success" success="True" time="0.0008135" />
              <test-case name="FastTests.Sparrow.DiffPagesTests.CompletelyDifferent" executed="True" result="Success" success="True" time="0.000641" />
              <test-case name="FastTests.Sparrow.DiffPagesTests.CanComputeSmallDifference_AndThenApplyit" executed="True" result="Success" success="True" time="0.0008423" />
              <test-case name="FastTests.Sparrow.DiffPagesTests.CanComputeNoDifference" executed="True" result="Success" success="True" time="0.0005217" />
              <test-case name="FastTests.Sparrow.DiffPagesTests.CanComputeSmallDifferenceFromNew" executed="True" result="Success" success="True" time="0.0004653" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.RavenDB5743" result="Success" success="True" time="0.110">
            <results>
              <test-case name="FastTests.Server.Basic.RavenDB5743.WillFilterMetadataPropertiesStartingWithAt" executed="True" result="Success" success="True" time="0.1095824" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7260" result="Success" success="True" time="0.017">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7260.ShouldWork" executed="True" result="Success" success="True" time="0.0172259" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests" result="Success" success="True" time="0.010">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.FailsOnInvalidJson(invalidJson: \&quot;sssssssssssssssss{\\\&quot;Name\\\&quot;:\\\&quot;Oren\\\&quot;}\&quot;)" executed="True" result="Success" success="True" time="0.0032269" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.FailsOnInvalidJson(invalidJson: \&quot;nnnnnnnnnn{\\\&quot;Name\\\&quot;:\\\&quot;Oren\\\&quot;}\&quot;)" executed="True" result="Success" success="True" time="0.0000955" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0054032" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000439" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.000013" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000071" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000087" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000101" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000086" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000119" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0012831" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000309" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.000009" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000093" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000082" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000108" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000075" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000082" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.UnmanageJsonReaderTests.CanReadAll(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.000009" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests" result="Success" success="True" time="0.041">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.ShouldNotCrashForManyDifferentProperties" executed="True" result="Success" success="True" time="0.0027324" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0029388" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0001727" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0001038" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000334" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0012438" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0003799" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000849" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0001592" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0308118" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0001392" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000586" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.000086" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000441" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0001028" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000516" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000451" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.CheckRoundtrip(name: \&quot;FastTests.Blittable.BlittableJsonWriterTests.Jsons\&quot;...)" executed="True" result="Success" success="True" time="0.0000637" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.BlittableFormatTests.InvalidJSon" executed="True" result="Success" success="True" time="0.0013422" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.CanIterateBackward" result="Success" success="True" time="0.909">
            <results>
              <test-case name="FastTests.Voron.Trees.CanIterateBackward.SeekLastOnEmptyResultInFalse" executed="True" result="Success" success="True" time="0.2909735" />
              <test-case name="FastTests.Voron.Trees.CanIterateBackward.CanSeekBack" executed="True" result="Success" success="True" time="0.3143221" />
              <test-case name="FastTests.Voron.Trees.CanIterateBackward.CanSeekLast" executed="True" result="Success" success="True" time="0.3038969" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.Validate" result="Success" success="True" time="1.533">
            <results>
              <test-case name="FastTests.Voron.Tables.Validate.ErrorsOnInvalidSchemaWithSingleFixedIndex" executed="True" result="Success" success="True" time="0.3046571" />
              <test-case name="FastTests.Voron.Tables.Validate.ErrorsOnInvalidSchemaWithSingleVariableIndex" executed="True" result="Success" success="True" time="0.3103909" />
              <test-case name="FastTests.Voron.Tables.Validate.ErrorsOnInvalidFixedSizeDef" executed="True" result="Success" success="True" time="0.3044435" />
              <test-case name="FastTests.Voron.Tables.Validate.ErrorsOnInvalidVariableSizeDef" executed="True" result="Success" success="True" time="0.31408" />
              <test-case name="FastTests.Voron.Tables.Validate.ErrorsOnInvalidSchemaWithMultipleIndexes" executed="True" result="Success" success="True" time="0.2991159" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.FreeScratchPages" result="Success" success="True" time="0.543">
            <results>
              <test-case name="FastTests.Voron.Storage.FreeScratchPages.UncommittedTransactionShouldFreeScratchPagesThatWillBeReusedByNextTransaction" executed="True" result="Success" success="True" time="0.543351" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.NotModifiedQueryResults" result="Success" success="True" time="0.112">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.NotModifiedQueryResults.Returns_correct_results_from_cache_if_server_response_was_not_modified" executed="True" result="Success" success="True" time="0.112451" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Parser.ScannerTests" result="Success" success="True" time="0.003">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.EmptyQueriesShouldJustReturnEndOfInput(q: null)" executed="True" result="Success" success="True" time="0.0004929" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.EmptyQueriesShouldJustReturnEndOfInput(q: \&quot;\&quot;)" executed="True" result="Success" success="True" time="0.0000189" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.EmptyQueriesShouldJustReturnEndOfInput(q: \&quot;   \&quot;)" executed="True" result="Success" success="True" time="0.000002" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.EmptyQueriesShouldJustReturnEndOfInput(q: \&quot;  \\t \&quot;)" executed="True" result="Success" success="True" time="0.0000014" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.IdentifierShouldBeFound(q: \&quot;hello\&quot;, start: 0, len: 5)" executed="True" result="Success" success="True" time="0.0006125" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.IdentifierShouldBeFound(q: \&quot; name = \&quot;, start: 1, len: 4)" executed="True" result="Success" success="True" time="0.0000083" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.IdentifierShouldBeFound(q: \&quot;some_thing \&quot;, start: 0, len: 10)" executed="True" result="Success" success="True" time="0.0000061" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.CanScanConsecutiveIdentifiers(q: \&quot;hello there\&quot;, start: 6, len: 5)" executed="True" result="Success" success="True" time="0.0006045" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseStringLiterals(q: \&quot; 'hel lo' \&quot;, escape: \&quot;hel lo\&quot;)" executed="True" result="Success" success="True" time="0.000607" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseStringLiterals(q: \&quot; \\\&quot;he \\\&quot;\&quot;, escape: \&quot;he \&quot;)" executed="True" result="Success" success="True" time="0.0000068" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseStringLiterals(q: \&quot; \\\&quot;he\\\&quot;\\\&quot; \\\&quot; \&quot;, escape: \&quot;he\\\&quot; \&quot;)" executed="True" result="Success" success="True" time="0.0000034" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseStringLiterals(q: \&quot; 'we''ll' \&quot;, escape: \&quot;we'll\&quot;)" executed="True" result="Success" success="True" time="0.0000014" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseStringLiterals(q: \&quot; 'we\\r\\nll' \&quot;, escape: \&quot;we\\r\\nll\&quot;)" executed="True" result="Success" success="True" time="0.0000014" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot;1\&quot;, expected: 1)" executed="True" result="Success" success="True" time="0.0009513" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot;1.0\&quot;, expected: 1)" executed="True" result="Success" success="True" time="0.0000331" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot;1234 \&quot;, expected: 1234)" executed="True" result="Success" success="True" time="0.0000035" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot; -1234 \&quot;, expected: -1234)" executed="True" result="Success" success="True" time="0.0000211" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot; 1.3\&quot;, expected: 1.3)" executed="True" result="Success" success="True" time="0.0000031" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ScannerTests.ParseNumbers(q: \&quot; -1.32\&quot;, expected: -1.32)" executed="True" result="Success" success="True" time="0.0000034" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.GroupByComplexObjects" result="Success" success="True" time="0.701">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.GroupByComplexObjects.By_single_complex_object" executed="True" result="Success" success="True" time="0.1795373" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.GroupByComplexObjects.By_multiple_complex_objects" executed="True" result="Success" success="True" time="0.1808756" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.GroupByComplexObjects.By_single_array_object" executed="True" result="Success" success="True" time="0.1711725" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.GroupByComplexObjects.By_complex_object_and_array" executed="True" result="Success" success="True" time="0.1695945" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.ByteStringTests" result="Success" success="True" time="0.018">
            <results>
              <test-case name="FastTests.Sparrow.ByteStringTests.AllocateAndReleaseShouldReuseAsSegment" executed="True" result="Success" success="True" time="0.0104817" />
              <test-case name="FastTests.Sparrow.ByteStringTests.Lifecycle" executed="True" result="Success" success="True" time="0.0020796" />
              <test-case name="FastTests.Sparrow.ByteStringTests.ConstructionInsideWholeSegmentWithHistory" executed="True" result="Success" success="True" time="0.0026679" />
              <test-case name="FastTests.Sparrow.ByteStringTests.AllocateAndReleaseShouldReuseRepeatedly" executed="True" result="Success" success="True" time="0.0007059" />
              <test-case name="FastTests.Sparrow.ByteStringTests.AllocateAndReleaseShouldReuse" executed="True" result="Success" success="True" time="0.0009003" />
              <test-case name="FastTests.Sparrow.ByteStringTests.ConstructionInsideWholeSegment" executed="True" result="Success" success="True" time="0.0006884" />
              <test-case name="FastTests.Sparrow.ByteStringTests.ConstructionReleaseForReuseTheLeftOver" executed="True" result="Success" success="True" time="0.0005375" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.MultipleTrees" result="Success" success="True" time="0.933">
            <results>
              <test-case name="FastTests.Voron.Trees.MultipleTrees.CanCreateNewTree" executed="True" result="Success" success="True" time="0.3206798" />
              <test-case name="FastTests.Voron.Trees.MultipleTrees.CreatingTreeWithoutCommitingTransactionShouldYieldNoResults" executed="True" result="Success" success="True" time="0.3053741" />
              <test-case name="FastTests.Voron.Trees.MultipleTrees.CanUpdateValuesInSubTree" executed="True" result="Success" success="True" time="0.3070739" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Load" result="Success" success="True" time="0.571">
            <results>
              <test-case name="FastTests.Client.Load.Load_Multi_Ids_With_Null_Should_Return_Dictionary_Without_nulls" executed="True" result="Success" success="True" time="0.0903949" />
              <test-case name="FastTests.Client.Load.Should_Load_Many_Ids_As_Post_Request" executed="True" result="Success" success="True" time="0.1224521" />
              <test-case name="FastTests.Client.Load.Load_Document_By_id" executed="True" result="Success" success="True" time="0.0890022" />
              <test-case name="FastTests.Client.Load.Load_Documents_By_ids" executed="True" result="Success" success="True" time="0.1032824" />
              <test-case name="FastTests.Client.Load.Load_Null_Should_Return_Null" executed="True" result="Success" success="True" time="0.081804" />
              <test-case name="FastTests.Client.Load.Load_Document_With_Int_Array_And_Long_Array" executed="True" result="Success" success="True" time="0.0837575" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Smuggler.SmugglerApiTests" result="Success" success="True" time="1.828">
            <results>
              <test-case name="FastTests.Smuggler.SmugglerApiTests.SkipExpiredDocumentWhenExport" executed="True" result="Success" success="True" time="0.2396629" />
              <test-case name="FastTests.Smuggler.SmugglerApiTests.ShouldReturnCorrectSmugglerResult" executed="True" result="Success" success="True" time="0.5042129" />
              <test-case name="FastTests.Smuggler.SmugglerApiTests.WillNotCreateMoreRevisionsAfterImport" executed="True" result="Success" success="True" time="0.2316877" />
              <test-case name="FastTests.Smuggler.SmugglerApiTests.CanExportAndImport" executed="True" result="Success" success="True" time="0.3347197" />
              <test-case name="FastTests.Smuggler.SmugglerApiTests.CanExportAndImportWithRevisionDocuments" executed="True" result="Success" success="True" time="0.3359709" />
              <test-case name="FastTests.Smuggler.SmugglerApiTests.CanExportDirectlyToRemote" executed="True" result="Success" success="True" time="0.1812663" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Exists" result="Success" success="True" time="0.096">
            <results>
              <test-case name="FastTests.Client.Exists.CheckIfDocumentExists" executed="True" result="Success" success="True" time="0.0959667" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Optimizations.EarlyLockRelease" result="Success" success="True" time="0.134">
            <results>
              <test-case name="FastTests.Voron.Optimizations.EarlyLockRelease.ShouldWork" executed="True" result="Success" success="True" time="0.1338445" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.MultiGetOperations" result="Success" success="True" time="0.156">
            <results>
              <test-case name="FastTests.Server.Basic.MultiGetOperations.WithPaging" executed="True" result="Success" success="True" time="0.0800819" />
              <test-case name="FastTests.Server.Basic.MultiGetOperations.UnlessAccessedLazyLoadsAreNoOp" executed="True" result="Success" success="True" time="0.076161" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8680" result="Success" success="True" time="0.002">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8680.CanPrintParsedQuery(queryText: \&quot;from Categories where id() = 'categories/8'\&quot;, expected: \&quot;FROM Categories WHERE id() = 'categories/8'\\r\\n\&quot;)" executed="True" result="Success" success="True" time="0.0018834" />
              <test-case name="FastTests.Issues.RavenDB_8680.CanPrintParsedQuery(queryText: \&quot;from Categories where id() in ('categories/8')\&quot;, expected: \&quot;FROM Categories WHERE id() IN ('categories/8')\\r\\n\&quot;)" executed="True" result="Success" success="True" time="0.0000341" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8076" result="Success" success="True" time="0.403">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8076.Can_sort_by_aggregation_function_in_dynamic_group_by_query" executed="True" result="Success" success="True" time="0.232161" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_8076.Filter_by_aggregation_function_in_dynamic_group_by_query" executed="True" result="Success" success="True" time="0.1711895" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueriesWithCustomFunctions+ProjectionParameters" result="Success" success="True" time="0.414">
            <results>
              <test-case name="FastTests.Client.QueriesWithCustomFunctions+ProjectionParameters.CanProjectWithArrayParameters" executed="True" result="Success" success="True" time="0.1510009" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions+ProjectionParameters.CanProjectWithListParameters" executed="True" result="Success" success="True" time="0.1268545" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions+ProjectionParameters.CanProjectWithStringParameter" executed="True" result="Success" success="True" time="0.1366041" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_7940" result="Success" success="True" time="0.434">
            <results>
              <test-case name="FastTests.Issues.RavenDB_7940.RecreatingIndexesToARecreatedDatabase" executed="True" result="Success" success="True" time="0.4341921" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_10052" result="Success" success="True" time="0.856">
            <results>
              <test-case name="FastTests.Issues.RavenDB_10052.CanCompileIndex3" executed="True" result="Success" success="True" time="0.2680095" />
              <test-case name="FastTests.Issues.RavenDB_10052.CanCompileIndex2" executed="True" result="Success" success="True" time="0.2154035" />
              <test-case name="FastTests.Issues.RavenDB_10052.CanCompileIndex4" executed="True" result="Success" success="True" time="0.2219892" />
              <test-case name="FastTests.Issues.RavenDB_10052.CanCompileIndex1" executed="True" result="Success" success="True" time="0.1510409" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.CanDefrag" result="Success" success="True" time="0.364">
            <results>
              <test-case name="FastTests.Voron.Trees.CanDefrag.CanDeleteAtRoot" executed="True" result="Success" success="True" time="0.3639142" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.Serialization" result="Success" success="True" time="1.336">
            <results>
              <test-case name="FastTests.Voron.Tables.Serialization.CanSerializeNormalIndex" executed="True" result="Success" success="True" time="0.336043" />
              <test-case name="FastTests.Voron.Tables.Serialization.CanSerializeMultiIndexSchema" executed="True" result="Success" success="True" time="0.3300617" />
              <test-case name="FastTests.Voron.Tables.Serialization.CanSerializeFixedIndex" executed="True" result="Success" success="True" time="0.3428038" />
              <test-case name="FastTests.Voron.Tables.Serialization.CanSerializeSchema" executed="True" result="Success" success="True" time="0.3265973" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_8464" result="Success" success="True" time="0.128">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8464.AfterAckShouldHappenAfterTheEndOfBatchRun" executed="True" result="Success" success="True" time="0.1278738" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8097" result="Success" success="True" time="0.184">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8097.TcpServerUrlShouldOnlyAllowTcpScheme" executed="True" result="Success" success="True" time="0.0121632" />
              <test-case name="FastTests.Issues.RavenDB_8097.ServerUrlShouldBeValidUri" executed="True" result="Success" success="True" time="0.0017813" />
              <test-case name="FastTests.Issues.RavenDB_8097.ServerUrlShouldOnlyAllowHttpOrHttps" executed="True" result="Success" success="True" time="0.1633517" />
              <test-case name="FastTests.Issues.RavenDB_8097.PortNumberIsAValidTcpServerUrl" executed="True" result="Success" success="True" time="0.0071938" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_8383" result="Success" success="True" time="0.099">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_8383.RunningSubscriptionOnNonExistantCollectionShouldThrow" executed="True" result="Success" success="True" time="0.0989202" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_6451" result="Success" success="True" time="0.192">
            <results>
              <test-case name="FastTests.Issues.RavenDB_6451.Exceptions_should_not_have_blittable_and_pointer_fields" executed="True" result="Success" success="True" time="0.1924912" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.FullTextSearchOnAutoIndex" result="Success" success="True" time="0.273">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.FullTextSearchOnAutoIndex.CanUseFullTextSearchInAutoIndex" executed="True" result="Success" success="True" time="0.1316415" />
              <test-case name="FastTests.Server.Documents.Indexing.FullTextSearchOnAutoIndex.CanUseFullTextSearchInAutoMapReduceIndex" executed="True" result="Success" success="True" time="0.1415278" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_7995" result="Success" success="True" time="0.237">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_7995.Cannot_filter_if_field_isnt_aggregation_nor_part_of_group_by_key" executed="True" result="Success" success="True" time="0.0860852" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.RavenDB_7995.Queries_specifying_different_ordering_in_group_by_should_be_handled_by_the_same_index" executed="True" result="Success" success="True" time="0.1509196" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Queries.AnalyzersThatRemovesStarShouldNotCutTheLastChar" result="Success" success="True" time="0.120">
            <results>
              <test-case name="FastTests.Client.Queries.AnalyzersThatRemovesStarShouldNotCutTheLastChar.CanDoPrefixQueryOnAnalyzedFields" executed="True" result="Success" success="True" time="0.1199126" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.FreeSpaceTest" result="Success" success="True" time="2.034">
            <results>
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.FreeSpaceHandlingShouldNotReturnPagesThatAreAlreadyAllocated(maxPageNumber: 400, numberOfFreedPages: 6, seed: 2)" executed="True" result="Success" success="True" time="0.3286716" />
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.WillBeReused" executed="True" result="Success" success="True" time="0.3328517" />
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.ShouldReturnProperPageFromSecondSection" executed="True" result="Success" success="True" time="0.3453043" />
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.CanReuseMostOfFreePages_RemainingOnesCanBeTakenToHandleFreeSpace(maxPageNumber: 400, numberOfFreedPages: 10, seed: 3)" executed="True" result="Success" success="True" time="0.339006" />
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.CanReuseMostOfFreePages_RemainingOnesCanBeTakenToHandleFreeSpace(maxPageNumber: 400, numberOfFreedPages: 10, seed: 223325516)" executed="True" result="Success" success="True" time="0.3306711" />
              <test-case name="FastTests.Voron.Trees.FreeSpaceTest.CanGetListOfAllFreedPages(maxPageNumber: 100, numberOfFreedPages: 500, seed: 373243787)" executed="True" result="Success" success="True" time="0.357689" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.ChangeVectorConflictStatusTests" result="Success" success="True" time="0.114">
            <results>
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_same_order_and_some_local_etags_large_than_remote" executed="True" result="Success" success="True" time="0.0077733" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_local(length: 15)" executed="True" result="Success" success="True" time="0.0024341" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_local(length: 100)" executed="True" result="Success" success="True" time="0.0001402" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_local(length: 1000)" executed="True" result="Success" success="True" time="0.0028341" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_remote(length: 15)" executed="True" result="Success" success="True" time="0.0015764" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_remote(length: 100)" executed="True" result="Success" success="True" time="0.0001235" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Only_one_etag_is_larger_at_remote(length: 1000)" executed="True" result="Success" success="True" time="0.0026919" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_remote_larger(length: 15)" executed="True" result="Success" success="True" time="0.0018791" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_remote_larger(length: 100)" executed="True" result="Success" success="True" time="0.0001326" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_remote_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0031252" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_local_larger(length: 15)" executed="True" result="Success" success="True" time="0.0013193" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_local_larger(length: 100)" executed="True" result="Success" success="True" time="0.0001151" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_local_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0086747" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_same_order_should_work(length: 15)" executed="True" result="Success" success="True" time="0.0019647" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_same_order_should_work(length: 100)" executed="True" result="Success" success="True" time="0.0000859" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_same_order_should_work(length: 1000)" executed="True" result="Success" success="True" time="0.0026748" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_local_larger(length: 15)" executed="True" result="Success" success="True" time="0.0014276" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_local_larger(length: 100)" executed="True" result="Success" success="True" time="0.000087" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_all_local_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0025672" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_larger(length: 15)" executed="True" result="Success" success="True" time="0.0019206" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_larger(length: 100)" executed="True" result="Success" success="True" time="0.0012978" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0026926" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.ToChangeVector_should_properly_parse_change_vector" executed="True" result="Success" success="True" time="0.0050145" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Empty_local_change_vector" executed="True" result="Success" success="True" time="0.0004907" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_not_same_order_and_some_local_etags_large_than_remote" executed="True" result="Success" success="True" time="0.0009159" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_smaller(length: 15)" executed="True" result="Success" success="True" time="0.0086284" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_smaller(length: 100)" executed="True" result="Success" success="True" time="0.0000863" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_all_remote_etags_smaller(length: 1000)" executed="True" result="Success" success="True" time="0.0024793" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_remote_larger(length: 15)" executed="True" result="Success" success="True" time="0.0014578" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_remote_larger(length: 100)" executed="True" result="Success" success="True" time="0.0000881" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_remote_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0045546" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_not_same_order_and_all_remote_etags_large_than_local" executed="True" result="Success" success="True" time="0.0008765" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_some_remote_etags_smaller_and_some_larger(length: 15)" executed="True" result="Success" success="True" time="0.0017704" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_some_remote_etags_smaller_and_some_larger(length: 100)" executed="True" result="Success" success="True" time="0.0000903" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_same_order_should_work_some_remote_etags_smaller_and_some_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0024705" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Different_change_vectors_with_different_prefix_remote_smaller_with_remote_etags_larger" executed="True" result="Success" success="True" time="0.0012008" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Different_change_vectors_with_different_prefix_local_smaller_with_remote_etags_larger" executed="True" result="Success" success="True" time="0.0008338" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Two_empty_ChangeVectors" executed="True" result="Success" success="True" time="0.0002894" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_same_order_and_all_local_etags_large_than_remote" executed="True" result="Success" success="True" time="0.0007548" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Different_change_vectors_with_different_prefix_local_smaller_with_remote_etags_smaller" executed="True" result="Success" success="True" time="0.0007643" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_some_local_larger_some_smaller(length: 15)" executed="True" result="Success" success="True" time="0.0015844" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_some_local_larger_some_smaller(length: 100)" executed="True" result="Success" success="True" time="0.0001071" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_different_order_should_work_some_local_larger_some_smaller(length: 1000)" executed="True" result="Success" success="True" time="0.0045627" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_different_order_should_work_some_local_larger_some_smaller(length: 15)" executed="True" result="Success" success="True" time="0.0017346" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_different_order_should_work_some_local_larger_some_smaller(length: 100)" executed="True" result="Success" success="True" time="0.0000881" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_longer_different_order_should_work_some_local_larger_some_smaller(length: 1000)" executed="True" result="Success" success="True" time="0.0023094" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_same_order_should_work(length: 15)" executed="True" result="Success" success="True" time="0.0012948" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_same_order_should_work(length: 100)" executed="True" result="Success" success="True" time="0.0000962" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_equal_length_same_order_should_work(length: 1000)" executed="True" result="Success" success="True" time="0.0023236" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_remote_larger(length: 15)" executed="True" result="Success" success="True" time="0.0019337" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_remote_larger(length: 100)" executed="True" result="Success" success="True" time="0.0001315" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_local_larger_different_order_should_work_all_remote_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0026584" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Different_change_vectors_with_different_prefix_remote_smaller_with_remote_etags_smaller" executed="True" result="Success" success="True" time="0.0009159" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_local_larger(length: 15)" executed="True" result="Success" success="True" time="0.0021583" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_local_larger(length: 100)" executed="True" result="Success" success="True" time="0.0000984" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_larger_different_order_should_work_all_local_larger(length: 1000)" executed="True" result="Success" success="True" time="0.0036819" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_different_order_should_work_some_local_larger_some_smaller(length: 15)" executed="True" result="Success" success="True" time="0.0013485" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_different_order_should_work_some_local_larger_some_smaller(length: 100)" executed="True" result="Success" success="True" time="0.0000801" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Very_large_change_vectors_remote_longer_different_order_should_work_some_local_larger_some_smaller(length: 1000)" executed="True" result="Success" success="True" time="0.0024257" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_same_order_and_all_remote_etags_large_than_local" executed="True" result="Success" success="True" time="0.0011242" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Empty_remote_change_vector_should_generate_already_merged" executed="True" result="Success" success="True" time="0.0006183" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Change_vector_has_negative_etag" executed="True" result="Success" success="True" time="0.001833" />
              <test-case name="FastTests.Server.Basic.ChangeVectorConflictStatusTests.Remote_has_entries_not_in_local_with_entries_not_same_order_and_all_local_etags_large_than_remote" executed="True" result="Success" success="True" time="0.0009662" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.DatabaseLandlordBugs" result="Success" success="True" time="0.180">
            <results>
              <test-case name="FastTests.Server.DatabaseLandlordBugs.CanCreateAndDeleteDbWithNameBeingPrefix" executed="True" result="Success" success="True" time="0.1795435" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Replication.ReplicationBasicTests" result="Success" success="True" time="1.038">
            <results>
              <test-case name="FastTests.Server.Replication.ReplicationBasicTests.Master_slave_replication_with_multiple_PUTS_should_work" executed="True" result="Success" success="True" time="0.3100204">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Replication.ReplicationBasicTests.Master_slave_replication_from_etag_zero_should_work" executed="True" result="Success" success="True" time="0.1552508">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Replication.ReplicationBasicTests.Master_master_replication_with_multiple_PUTS_should_work" executed="True" result="Success" success="True" time="0.2028297">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Replication.ReplicationBasicTests.Can_get_performance_stats" executed="True" result="Success" success="True" time="0.2216836">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Replication.ReplicationBasicTests.Master_slave_replication_with_exceptions_should_work" executed="True" result="Success" success="True" time="0.148101">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.ScratchBuffer.ActivelyUsedBytesTracking" result="Success" success="True" time="0.004">
            <results>
              <test-case name="FastTests.Voron.ScratchBuffer.ActivelyUsedBytesTracking.Scratch_file_is_aware_of_potentialy_active_readers" executed="True" result="Success" success="True" time="0.00369" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9900" result="Success" success="True" time="0.018">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9900.Database_creation_using_relative_path_creates_directories_incorrectly" executed="True" result="Success" success="True" time="0.0180099" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.Increments" result="Success" success="True" time="0.679">
            <results>
              <test-case name="FastTests.Voron.Storage.Increments.SimpleIncrementShouldWork" executed="True" result="Success" success="True" time="0.339114" />
              <test-case name="FastTests.Voron.Storage.Increments.SimpleIncrementEntriesCountShouldStayCorrectAfterCommit" executed="True" result="Success" success="True" time="0.3401387" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests" result="Success" success="True" time="0.068">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.SelectMany(match =&gt; match.Teams, (match, team\&quot;..., optimized: \&quot;foreach (var match in docs)\\r\\n{\\r\\n    foreach (v\&quot;...)" executed="True" result="Success" success="True" time="0.0327099" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.SelectMany(barn =&gt; barn.Households, \\r\\n     \&quot;..., optimized: \&quot;foreach (var barn in docs)\\r\\n{\\r\\n    foreach (va\&quot;...)" executed="True" result="Success" success="True" time="0.0010768" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.SelectMany((Func&lt;dynamic, IEnumerable&lt;dynamic\&quot;..., optimized: \&quot;foreach (var user in docs)\\r\\n{\\r\\n    foreach (va\&quot;...)" executed="True" result="Success" success="True" time="0.009977" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;e1.SelectMany(x1 =&gt; e2, (x1, x2) =&gt; new { x2.v })\&quot;, optimized: \&quot;foreach (var x1 in e1)\\r\\n{\\r\\n    foreach (var x2\&quot;...)" executed="True" result="Success" success="True" time="0.000423" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.Customers.SelectMany(c =&gt; c.Orders, (customer\&quot;..., optimized: \&quot;foreach (var customer in docs.Customers)\\r\\n{\\r\\n \&quot;...)" executed="True" result="Success" success="True" time="0.0005594" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;\\r\\n            from u2 in (\\r\\n                fr\&quot;..., optimized: \&quot;foreach (var u0 in docs.Users)\\r\\n{\\r\\n    var u1 \&quot;...)" executed="True" result="Success" success="True" time="0.0008029" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;\\r\\n            from u in docs.Users\\r\\n          \&quot;..., optimized: \&quot;foreach (var u in docs.Users)\\r\\n{\\r\\n    foreach \&quot;...)" executed="True" result="Success" success="True" time="0.0008412" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;\\r\\n            from u in docs.Users\\r\\n          \&quot;..., optimized: \&quot;foreach (var u in docs.Users)\\r\\n{\\r\\n    if (u.Is\&quot;...)" executed="True" result="Success" success="True" time="0.0074443" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;from doc in docs.Foos\\r\\n                         \&quot;..., optimized: \&quot;foreach (var doc in docs.Foos)\\r\\n{\\r\\n    foreach\&quot;...)" executed="True" result="Success" success="True" time="0.0010502" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.Books.Select(p =&gt; new {\\r\\n                  \&quot;..., optimized: \&quot;foreach (var p in docs.Books)\\r\\n{\\r\\n    var p0 =\&quot;...)" executed="True" result="Success" success="True" time="0.0011715" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;from doc in docs.Foos\\r\\nlet a = doc.Aloha\\r\\n    \&quot;..., optimized: \&quot;foreach (var doc in docs.Foos)\\r\\n{\\r\\n    var a =\&quot;...)" executed="True" result="Success" success="True" time="0.0012963" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;from q in docs.Questions\\r\\n                    se\&quot;..., optimized: \&quot;foreach (var q in docs.Questions)\\r\\n{\\r\\n    var \&quot;...)" executed="True" result="Success" success="True" time="0.0004729" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;docs.Questions.Select(x =&gt; new\\r\\n            {\\r\\\&quot;..., optimized: \&quot;foreach (var x in docs.Questions)\\r\\n{\\r\\n    var \&quot;...)" executed="True" result="Success" success="True" time="0.0007985" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;from q in docs.Questions\\r\\n                from a\&quot;..., optimized: \&quot;foreach (var q in docs.Questions)\\r\\n{\\r\\n    fore\&quot;...)" executed="True" result="Success" success="True" time="0.0085645" />
              <test-case name="FastTests.Server.Documents.Indexing.RavenLinqOptimizerTests.CanOptimizeExpression(code: \&quot;from q in docs.Questions\\r\\n                    se\&quot;..., optimized: \&quot;foreach (var q in docs.Questions)\\r\\n{\\r\\n    var \&quot;...)" executed="True" result="Success" success="True" time="0.0008277" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition" result="Success" success="True" time="0.013">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionForQueryWithNestedFieldsAndStringSortingSet" executed="True" result="Success" success="True" time="0.0009444" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionSupportsArrayProperties" executed="True" result="Success" success="True" time="0.0007442" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CanExtractTermsFromRangedQuery" executed="True" result="Success" success="True" time="0.00053" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionForQueryWithRangeField" executed="True" result="Success" success="True" time="0.0006111" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionForQueryWithNestedFieldsAndNumberSortingSet" executed="True" result="Success" success="True" time="0.0006953" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.DefinitionExtensionWontDuplicateFields" executed="True" result="Success" success="True" time="0.0009082" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.ExtendsMappingBasedOnExistingDefinition" executed="True" result="Success" success="True" time="0.0008124" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CanExtractTermsFromComplexQuery" executed="True" result="Success" success="True" time="0.000777" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CanExtractMultipleTermsQuery" executed="True" result="Success" success="True" time="0.0006786" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CanExtractTermsFromEqualityQuery" executed="True" result="Success" success="True" time="0.0005012" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CanExtractMultipleNestedTermsQuery" executed="True" result="Success" success="True" time="0.0006406" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionForQueryWithSortedFields" executed="True" result="Success" success="True" time="0.0005906" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.SpecifyingInvalidParametersWillResultInException" executed="True" result="Success" success="True" time="0.001475" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.CreateDefinitionSupportsNestedProperties" executed="True" result="Success" success="True" time="0.0007029" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.OrderingSpecifiedUsing_AS_AfterOrderBy" executed="True" result="Success" success="True" time="0.0006738" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.CreationOfAutoMapIndexDefinition.ExtendsIndexingOptionsOfTheSameField" executed="True" result="Success" success="True" time="0.0014706" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.VeryBig" result="Success" success="True" time="2.192">
            <results>
              <test-case name="FastTests.Voron.Storage.VeryBig.CanGrowBeyondInitialSize_Root" executed="True" result="Success" success="True" time="0.6360894" />
              <test-case name="FastTests.Voron.Storage.VeryBig.CanGrowBeyondInitialSize_WithAnotherTree" executed="True" result="Success" success="True" time="0.7485165" />
              <test-case name="FastTests.Voron.Storage.VeryBig.CanGrowBeyondInitialSize" executed="True" result="Success" success="True" time="0.8069929" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Bugs.RavenDB_9225" result="Success" success="True" time="0.760">
            <results>
              <test-case name="FastTests.Voron.Bugs.RavenDB_9225.VariableSizeTree_DeletingFromMiddle" executed="True" result="Success" success="True" time="0.3716139" />
              <test-case name="FastTests.Voron.Bugs.RavenDB_9225.FixedSizeTree_DeletingFromMiddle" executed="True" result="Success" success="True" time="0.3881624" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Hilo" result="Success" success="True" time="1.943">
            <results>
              <test-case name="FastTests.Client.Hilo.Return_Unused_Range_On_Dispose" executed="True" result="Success" success="True" time="0.1055711">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLoKeyGenerator_async_hangs_when_aggressive_caching_enabled_on_other_documentstore" executed="True" result="Success" success="True" time="0.4440955">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.ParallelGeneration_NoClashesOrGaps" executed="True" result="Success" success="True" time="0.1323939">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLoKeyGenerator_works_without_aggressive_caching" executed="True" result="Success" success="True" time="0.1085479">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.SequentialGeneration_NoClashesOrGaps" executed="True" result="Success" success="True" time="0.0987146">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLoKeyGenerator_async_hangs_when_aggressive_caching_enabled" executed="True" result="Success" success="True" time="0.0899522">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.Capacity_Should_Double" executed="True" result="Success" success="True" time="0.1011808">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLoKeyGenerator_hangs_when_aggressive_caching_enabled" executed="True" result="Success" success="True" time="0.0940981">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLo_Async_MultiDb" executed="True" result="Success" success="True" time="0.0798952">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.HiLoKeyGenerator_hangs_when_aggressive_caching_enabled_on_other_documentstore" executed="True" result="Success" success="True" time="0.3675712">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.Should_Resolve_Conflict_With_Highest_Number" executed="True" result="Success" success="True" time="0.2231419">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Client.Hilo.Hilo_Cannot_Go_Down" executed="True" result="Success" success="True" time="0.0980169">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests" result="Success" success="True" time="0.238">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LZ4Test(size: 1)" executed="True" result="Success" success="True" time="0.0020884" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LZ4Test(size: 10)" executed="True" result="Success" success="True" time="0.0000502" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LZ4Test(size: 100)" executed="True" result="Success" success="True" time="0.0000513" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LZ4Test(size: 1000)" executed="True" result="Success" success="True" time="0.0000648" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LZ4Test(size: 10000)" executed="True" result="Success" success="True" time="0.0006771" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.Generating_DictionaryDeserializationRoutine_should_work" executed="True" result="Success" success="True" time="0.0199679" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LongStringsTest(repeatSize: 1)" executed="True" result="Success" success="True" time="0.0678983" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LongStringsTest(repeatSize: 10)" executed="True" result="Success" success="True" time="0.0001505" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LongStringsTest(repeatSize: 100)" executed="True" result="Success" success="True" time="0.0000966" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.LongStringsTest(repeatSize: 1000)" executed="True" result="Success" success="True" time="0.000234" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.UsingBooleans" executed="True" result="Success" success="True" time="0.0088577" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.FunctionalityTest2" executed="True" result="Success" success="True" time="0.0406255" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.BasicCopyToStream" executed="True" result="Success" success="True" time="0.0089992" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.EmptyArrayTest" executed="True" result="Success" success="True" time="0.030818" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.FunctionalityTests.FunctionalityTest" executed="True" result="Success" success="True" time="0.0572342" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.FixedSize.SimpleFixedSizeTrees" result="Success" success="True" time="4.828">
            <results>
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanIterate" executed="True" result="Success" success="True" time="0.4579152" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanAdd_Mixed" executed="True" result="Success" success="True" time="0.4534049" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanDeleteRangeWithGaps" executed="True" result="Success" success="True" time="0.3615519" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.SeekShouldGiveTheNextKey" executed="True" result="Success" success="True" time="0.4302497" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanAdd" executed="True" result="Success" success="True" time="0.4590274" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanAdd_WithValue" executed="True" result="Success" success="True" time="0.4571367" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanDeleteRange" executed="True" result="Success" success="True" time="0.4321861" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.TimeSeries" executed="True" result="Success" success="True" time="0.4060712" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanRemove" executed="True" result="Success" success="True" time="0.4963291" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanDeleteAllRange" executed="True" result="Success" success="True" time="0.4323075" />
              <test-case name="FastTests.Voron.FixedSize.SimpleFixedSizeTrees.CanRemove_WithValue" executed="True" result="Success" success="True" time="0.4415341" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Basic.MaxSecondsForTaskToWaitForDatabaseToLoad" result="Success" success="True" time="0.689">
            <results>
              <test-case name="FastTests.Server.Basic.MaxSecondsForTaskToWaitForDatabaseToLoad.Should_throw_when_there_is_timeout" executed="True" result="Success" success="True" time="0.4686927" />
              <test-case name="FastTests.Server.Basic.MaxSecondsForTaskToWaitForDatabaseToLoad.Should_not_throw_when_there_no_timeout" executed="True" result="Success" success="True" time="0.2202996" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.CompositeIndex" result="Success" success="True" time="1.305">
            <results>
              <test-case name="FastTests.Voron.Tables.CompositeIndex.CanInsertThenReadByComposite" executed="True" result="Success" success="True" time="0.4510003" />
              <test-case name="FastTests.Voron.Tables.CompositeIndex.CanInsertThenUpdateThenByComposite" executed="True" result="Success" success="True" time="0.4301435" />
              <test-case name="FastTests.Voron.Tables.CompositeIndex.CanInsertThenDeleteByComposite" executed="True" result="Success" success="True" time="0.4234369" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest" result="Success" success="True" time="4.134">
            <results>
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages_multiple_times" executed="True" result="Success" success="True" time="0.4029874" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_read_and_write_small_values" executed="True" result="Success" success="True" time="0.5104299" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages(growthMultiplier: 2)" executed="True" result="Success" success="True" time="0.4119694" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages(growthMultiplier: 5)" executed="True" result="Success" success="True" time="0.4716268" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages(growthMultiplier: 15)" executed="True" result="Success" success="True" time="0.4548523" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages(growthMultiplier: 100)" executed="True" result="Success" success="True" time="0.5006848" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages(growthMultiplier: 250)" executed="True" result="Success" success="True" time="0.5004681" />
              <test-case name="FastTests.Voron.Storage.MemoryMapWithoutBackingPagerTest.Should_be_able_to_allocate_new_pages_with_remapping" executed="True" result="Success" success="True" time="0.880633" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.ServerStore" result="Success" success="True" time="23.170">
            <results>
              <test-case name="FastTests.Server.ServerStore.Server_store_basic_read_write_should_work" executed="True" result="Success" success="True" time="23.0049831" />
              <test-case name="FastTests.Server.ServerStore.Server_store_write_should_throw_concurrency_exception_if_relevant" executed="False" result="Skipped" time="0">
                <reason>
                  <message>RavenDB-8758</message>
                </reason>
              </test-case>
              <test-case name="FastTests.Server.ServerStore.Admin_databases_endpoint_should_fetch_document_with_etag_in_metadata_property" executed="True" result="Success" success="True" time="0.0706985" />
              <test-case name="FastTests.Server.ServerStore.Admin_databases_endpoint_should_refuse_document_with_lower_etag_with_concurrency_Exception" executed="True" result="Success" success="True" time="0.094274" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_9512" result="Success" success="True" time="0.110">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_9512.AbortWhenNoDocsLeft" executed="True" result="Success" success="True" time="0.1102874" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.PeepingTomTest" result="Success" success="True" time="0.018">
            <results>
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectlyWithRandomValues(seed: 1291481720)" executed="True" result="Success" success="True" time="0.0150579" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectlyWithRandomValues(seed: 550318812)" executed="True" result="Success" success="True" time="0.0015137" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 123456, chunkSizeToRead: 65535, offset: 0)" executed="True" result="Success" success="True" time="0.0007216" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 1234, chunkSizeToRead: 535, offset: 0)" executed="True" result="Success" success="True" time="0.0000527" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 4096, chunkSizeToRead: 4096, offset: 0)" executed="True" result="Success" success="True" time="0.0000549" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 9123, chunkSizeToRead: 1024, offset: 0)" executed="True" result="Success" success="True" time="0.0000754" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 123456, chunkSizeToRead: 65535, offset: 1024)" executed="True" result="Success" success="True" time="0.0003168" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 1234, chunkSizeToRead: 535, offset: 300)" executed="True" result="Success" success="True" time="0.0000379" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 4096, chunkSizeToRead: 4096, offset: 4095)" executed="True" result="Success" success="True" time="0.0000491" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 9123, chunkSizeToRead: 1024, offset: 1024)" executed="True" result="Success" success="True" time="0.0000567" />
              <test-case name="FastTests.Blittable.PeepingTomTest.PeepingTomStreamShouldPeepCorrectly(originalSize: 0, chunkSizeToRead: 0, offset: 0)" executed="True" result="Success" success="True" time="0.0000254" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Queries.RegexQueryTests" result="Success" success="True" time="0.741">
            <results>
              <test-case name="FastTests.Client.Queries.RegexQueryTests.QueriesWithRegexFromDocumentQuery" executed="True" result="Success" success="True" time="0.1504305" />
              <test-case name="FastTests.Client.Queries.RegexQueryTests.QueriesWithRegexFromLinqProvider" executed="True" result="Success" success="True" time="0.143617" />
              <test-case name="FastTests.Client.Queries.RegexQueryTests.QueriesWithRegexFromLinqProvider_QueryExpressionSyntax" executed="True" result="Success" success="True" time="0.1339587" />
              <test-case name="FastTests.Client.Queries.RegexQueryTests.QueriesWithRegexAndEscapedCharsShouldWork" executed="True" result="Success" success="True" time="0.147019" />
              <test-case name="FastTests.Client.Queries.RegexQueryTests.QueriesWithRegexShouldWork" executed="True" result="Success" success="True" time="0.1660834" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006" result="Success" success="True" time="0.731">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006.CanUseExactInAutoIndex" executed="True" result="Success" success="True" time="0.1960365" />
              <test-case name="FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006.CanUseExactInAutoMapReduceIndex" executed="True" result="Success" success="True" time="0.1488804" />
              <test-case name="FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006.IndexNameFinderShouldPreservePascalCaseFieldNames" executed="True" result="Success" success="True" time="0.0003791" />
              <test-case name="FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006.ShouldExtendMappingOfTheSameField" executed="True" result="Success" success="True" time="0.1815138" />
              <test-case name="FastTests.Server.Documents.Indexing.ExactSearchOnAutoIndex_RavenDB_8006.CanUseExactAndSearchTogetherInAutoMapReduceIndex" executed="True" result="Success" success="True" time="0.2037446" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_3082" result="Success" success="True" time="0.165">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3082.StronglyTypedDataSubscriptions" executed="True" result="Success" success="True" time="0.1650057" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9348" result="Success" success="True" time="0.007">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9348.IfConfigurationKeyIsStringArrayThenItShouldSupportValuesWithSemicolonPropely" executed="True" result="Success" success="True" time="0.0072602" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.Snapshots" result="Success" success="True" time="0.368">
            <results>
              <test-case name="FastTests.Voron.Storage.Snapshots.SingleItemBatchTestLowLevel" executed="True" result="Success" success="True" time="0.3682965" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9379" result="Success" success="True" time="0.023">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9379.GivenUnsecuredAccessSetInCliArgsRemoveItAfterSetupIfRunOnDocker" executed="True" result="Success" success="True" time="0.0136721" />
              <test-case name="FastTests.Issues.RavenDB_9379.ServerUrlHostAndPortCliArgShouldStayTheSameAfterRestart" executed="True" result="Success" success="True" time="0.0024097" />
              <test-case name="FastTests.Issues.RavenDB_9379.GivenServerUrlCliArgAndSecuredSetupSchemeShouldBeUpdatedAfterRestart" executed="True" result="Success" success="True" time="0.0068561" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Utils.TimeParsing" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Utils.TimeParsing.WillNotParseAsTimeSpan(dt: \&quot;21:07:32 some text\&quot;)" executed="True" result="Success" success="True" time="0.0007066" />
              <test-case name="FastTests.Utils.TimeParsing.WillNotParseAsTimeSpan(dt: \&quot;2.21:07:32 some text\&quot;)" executed="True" result="Success" success="True" time="0.00002" />
              <test-case name="FastTests.Utils.TimeParsing.WillNotParseAsTimeSpan(dt: \&quot;333.21:07:32.232 some text\&quot;)" executed="True" result="Success" success="True" time="0.0000032" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;21:07:32.2082285\&quot;)" executed="True" result="Success" success="True" time="0.0008258" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;21:07:32\&quot;)" executed="True" result="Success" success="True" time="0.0000174" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;2.21:07:32\&quot;)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;-2.21:07:32\&quot;)" executed="True" result="Success" success="True" time="0.0000054" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;2.21:07:32.232\&quot;)" executed="True" result="Success" success="True" time="0.000005" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidTimeSpans(dt: \&quot;333.21:07:32.232\&quot;)" executed="True" result="Success" success="True" time="0.0000039" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidDatesTimeOffset(dt: \&quot;2016-10-05T21:07:32.2082285+03:00\&quot;)" executed="True" result="Success" success="True" time="0.0038301" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidDatesTimeOffset(dt: \&quot;2016-10-05T21:17:32.2082285+01:00\&quot;)" executed="True" result="Success" success="True" time="0.0000801" />
              <test-case name="FastTests.Utils.TimeParsing.InvalidData(dt: \&quot;2016-10-05T\&quot;)" executed="True" result="Success" success="True" time="0.0004003" />
              <test-case name="FastTests.Utils.TimeParsing.InvalidData(dt: \&quot;2016-10-05T21:17:32.2082285+01:00,ad\&quot;)" executed="True" result="Success" success="True" time="0.0000065" />
              <test-case name="FastTests.Utils.TimeParsing.InvalidData(dt: \&quot;2016-10-05T21:17:3\&quot;)" executed="True" result="Success" success="True" time="0.0000017" />
              <test-case name="FastTests.Utils.TimeParsing.InvalidData(dt: \&quot;2016-10-05T21:17:32.2082285+01:00:00\&quot;)" executed="True" result="Success" success="True" time="0.000002" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidDates(dt: \&quot;2016-10-05T21:07:32.2082285Z\&quot;)" executed="True" result="Success" success="True" time="0.0004372" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidDates(dt: \&quot;2016-10-05T21:07:32.2082285\&quot;)" executed="True" result="Success" success="True" time="0.0000086" />
              <test-case name="FastTests.Utils.TimeParsing.CanParseValidDates(dt: \&quot;2016-10-05T21:07:32\&quot;)" executed="True" result="Success" success="True" time="0.0000031" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_9068" result="Success" success="True" time="0.122">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_9068.CancellingPassedCancellationTokenToRunShouldCancelSubscriptionExecution" executed="True" result="Success" success="True" time="0.1223114" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8700" result="Success" success="True" time="0.004">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8700.ThisWillCrashOnDocumentIdGenerator" executed="True" result="Success" success="True" time="0.0044529" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Utils.ChunkedMmapStreamTests" result="Success" success="True" time="0.029">
            <results>
              <test-case name="FastTests.Utils.ChunkedMmapStreamTests.Can_seek_and_read_from_chunked_mmap_file(totalSize: 13, chunkSize: 3, seed: 438258363)" executed="True" result="Success" success="True" time="0.011114" />
              <test-case name="FastTests.Utils.ChunkedMmapStreamTests.Can_seek_and_read_from_chunked_mmap_file(totalSize: 94, chunkSize: 7, seed: 1560158182)" executed="True" result="Success" success="True" time="0.0178492" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8929" result="Success" success="True" time="0.211">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8929.SelectWithKeywordsShouldWrok" executed="True" result="Success" success="True" time="0.210727" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Utils.LimitedStreamTests" result="Success" success="True" time="0.063">
            <results>
              <test-case name="FastTests.Utils.LimitedStreamTests.Should_properly_read_ranges(seed: 1836654994)" executed="True" result="Success" success="True" time="0.0634536" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9875" result="Success" success="True" time="0.003">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9875.Commands_should_be_careful_about_blittable_usage" executed="True" result="Success" success="True" time="0.002984" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.RavenDB_5383" result="Success" success="True" time="0.210">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_5383.When_map_results_do_not_change_then_we_skip_the_reduce_phase(numberOfDocs: 1)" executed="True" result="Success" success="True" time="0.2104816" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8217" result="Success" success="True" time="0.217">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8217.CanGetProperErrorForIndexCreationFailure" executed="True" result="Success" success="True" time="0.2171915" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.NumericIndexingTest" result="Success" success="True" time="0.616">
            <results>
              <test-case name="FastTests.Issues.NumericIndexingTest.IndexingAFloatField" executed="True" result="Success" success="True" time="0.2549356" />
              <test-case name="FastTests.Issues.NumericIndexingTest.FloatIndexing" executed="True" result="Success" success="True" time="0.1482035" />
              <test-case name="FastTests.Issues.NumericIndexingTest.DoubleIndexing" executed="True" result="Success" success="True" time="0.2128147" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9895" result="Success" success="True" time="0.285">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9895.TestIntersectTest" executed="True" result="Success" success="True" time="0.2848401" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.LZ4Tests" result="Success" success="True" time="0.054">
            <results>
              <test-case name="FastTests.Sparrow.LZ4Tests.Compress" executed="True" result="Success" success="True" time="0.0010472" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 10, bits: 2)" executed="True" result="Success" success="True" time="0.0011132" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 10, bits: 3)" executed="True" result="Success" success="True" time="0.0000167" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 10, bits: 4)" executed="True" result="Success" success="True" time="0.0000061" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 15, bits: 2)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 16, bits: 2)" executed="True" result="Success" success="True" time="0.0000064" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 40, bits: 2)" executed="True" result="Success" success="True" time="0.000009" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 100, bits: 2)" executed="True" result="Success" success="True" time="0.0000145" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 100, bits: 4)" executed="True" result="Success" success="True" time="0.0000134" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 1000, bits: 4)" executed="True" result="Success" success="True" time="0.0000991" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 10000, bits: 4)" executed="True" result="Success" success="True" time="0.0010491" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 50000, bits: 4)" executed="True" result="Success" success="True" time="0.0193669" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 100000, bits: 4)" executed="True" result="Success" success="True" time="0.0154682" />
              <test-case name="FastTests.Sparrow.LZ4Tests.CompressAndDecompress(size: 100000, bits: 7)" executed="True" result="Success" success="True" time="0.0148435" />
              <test-case name="FastTests.Sparrow.LZ4Tests.Compress2" executed="True" result="Success" success="True" time="0.0009776" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.CanDeployIndex" result="Success" success="True" time="0.308">
            <results>
              <test-case name="FastTests.Issues.CanDeployIndex.can_deploy_index2" executed="True" result="Success" success="True" time="0.1450808" />
              <test-case name="FastTests.Issues.CanDeployIndex.can_deploy_index1" executed="True" result="Success" success="True" time="0.1632193" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Queries.FullTextSearchOnTags" result="Success" success="True" time="2.383">
            <results>
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.CanSearchUsingPhrase" executed="True" result="Success" success="True" time="0.1955924" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.Can_have_special_characters_in_search_text" executed="True" result="Success" success="True" time="0.1439029" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.CanSearchFullyAnalyzedTerm" executed="True" result="Success" success="True" time="0.1470596" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchCanUseNotAndAnd" executed="True" result="Success" success="True" time="0.078294" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.BoostingSearches" executed="True" result="Success" success="True" time="0.1386538" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchCanUseAnd" executed="True" result="Success" success="True" time="0.0728512" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.Can_search_inner_words_with_extra_condition" executed="True" result="Success" success="True" time="0.1373308" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.Can_have_special_characters_in_search_text_string" executed="True" result="Success" success="True" time="0.1016271" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.MultipleSearches" executed="True" result="Success" success="True" time="0.1775352" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.ActuallySearchWithAndAndNot" executed="True" result="Success" success="True" time="0.1340447" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchCanUseOr" executed="True" result="Success" success="True" time="0.0699783" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchCanUseAnd2" executed="True" result="Success" success="True" time="0.0816201" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.CanSearchUsingPhrase_MultipleSearches" executed="True" result="Success" success="True" time="0.1324537" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.StandardSearchWillProduceExpectedResult" executed="True" result="Success" success="True" time="0.0790718" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchCanUseNot" executed="True" result="Success" success="True" time="0.0786568" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.Can_search_inner_words" executed="True" result="Success" success="True" time="0.1360611" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.SearchWillUseGuessByDefault" executed="True" result="Success" success="True" time="0.0722586" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.UsingSuggest" executed="True" result="Success" success="True" time="0.2104192" />
              <test-case name="FastTests.Client.Queries.FullTextSearchOnTags.CanSearchUsingPhraseAndOrderBy" executed="True" result="Success" success="True" time="0.1957489" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests" result="Success" success="True" time="1.161">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicIntDeeperNestedStructure" executed="True" result="Success" success="True" time="0.0062854" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.ReadDataTypesTest" executed="True" result="Success" success="True" time="0.0233371" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.FlatObjectWithObjectArray" executed="True" result="Success" success="True" time="0.0024198" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicNestedEmptyObject" executed="True" result="Success" success="True" time="0.0012179" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicObject" executed="True" result="Success" success="True" time="0.0012135" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BigDepthTest(propertiesAmount: 255)" executed="True" result="Success" success="True" time="0.0035237" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BigDepthTest(propertiesAmount: 32767)" executed="True" result="Success" success="True" time="0.5955726" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BigDepthTest(propertiesAmount: 32768)" executed="True" result="Success" success="True" time="0.508957" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.FlatObjectWithIntArrayTest" executed="True" result="Success" success="True" time="0.0019122" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.FlatObjectWithObjectArrayWithNestedArray" executed="True" result="Success" success="True" time="0.002422" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicIntNestedStructure" executed="True" result="Success" success="True" time="0.002685" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.FlatObjectWithArrayOfEmptyObjects" executed="True" result="Success" success="True" time="0.0019968" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.FlatObjectWithEmptyArray" executed="True" result="Success" success="True" time="0.0016661" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.SimpleArrayDocument" executed="True" result="Success" success="True" time="0.0033826" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.ObjectWithNestedIntArrayTest" executed="True" result="Success" success="True" time="0.0020128" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicIntFlatStructure" executed="True" result="Success" success="True" time="0.0018798" />
              <test-case name="FastTests.Blittable.BlittableJsonWriterTests.ManualBuilderTests.BasicEmptyObject" executed="True" result="Success" success="True" time="0.0006938" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.UniqueValues" result="Success" success="True" time="2.345">
            <results>
              <test-case name="FastTests.Client.UniqueValues.RemoveUniqueFailed" executed="True" result="Success" success="True" time="0.2625783" />
              <test-case name="FastTests.Client.UniqueValues.SaveSameValuesToDifferentDatabases" executed="True" result="Success" success="True" time="0.2508719" />
              <test-case name="FastTests.Client.UniqueValues.CanRemoveUnique" executed="True" result="Success" success="True" time="0.2237917" />
              <test-case name="FastTests.Client.UniqueValues.CanPutUniqueObject" executed="True" result="Success" success="True" time="0.2087695" />
              <test-case name="FastTests.Client.UniqueValues.CanPutUniqueString" executed="True" result="Success" success="True" time="0.2035415" />
              <test-case name="FastTests.Client.UniqueValues.CanPutMultiDifferentValues" executed="True" result="Success" success="True" time="0.19513" />
              <test-case name="FastTests.Client.UniqueValues.ReturnCurrentValueWhenPuttingConcurrently" executed="True" result="Success" success="True" time="0.2306647" />
              <test-case name="FastTests.Client.UniqueValues.CanListCompareExchange" executed="True" result="Success" success="True" time="0.2343636" />
              <test-case name="FastTests.Client.UniqueValues.CanExportAndImportCmpXchg" executed="True" result="Success" success="True" time="0.2845983" />
              <test-case name="FastTests.Client.UniqueValues.CanGetIndexValue" executed="True" result="Success" success="True" time="0.2511127" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9684" result="Success" success="True" time="0.106">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9684.Should_be_able_to_query_tenant_without_default_database_set" executed="True" result="Success" success="True" time="0.1062505" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Parser.ComplexQueries" result="Success" success="True" time="0.004">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users (IsActive =false)\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;}\&quot;)" executed="True" result="Success" success="True" time="0.0010079" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users (IsActive = true)\\r\\nGROUP BY Country\\r\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:\\\&quot;...)" executed="True" result="Success" success="True" time="0.0021573" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;\\r\\nFROM Users\\r\\nWHERE boost(Age &gt; 15, 2) \\r\\nORD\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;Where\\\&quot;:{\\\&quot;Method\\\&quot;:\\\&quot;boost\\\&quot;...)" executed="True" result="Success" success="True" time="0.000315" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users\\r\\nORDER BY Age AS double DESC, Name AS\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;OrderBy\\\&quot;:[{\\\&quot;Field\\\&quot;:\\\&quot;Age\\\&quot;...)" executed="True" result="Success" success="True" time="0.0000491" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users GROUP BY Country WHERE sum(Weight) &gt; 10\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:\\\&quot;...)" executed="True" result="Success" success="True" time="0.0000181" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Posts WHERE Tags[].Name = 'Any'\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Posts\\\&quot;,\\\&quot;Where\\\&quot;:{\\\&quot;Type\\\&quot;:\\\&quot;Equal\\\&quot;,\&quot;...)" executed="True" result="Success" success="True" time="0.0000068" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users AS u\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;Alias\\\&quot;:\\\&quot;u\\\&quot;}\&quot;)" executed="True" result="Success" success="True" time="0.0000035" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users WHERE search(Name, 'oren')\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;Where\\\&quot;:{\\\&quot;Method\\\&quot;:\\\&quot;search\&quot;...)" executed="True" result="Success" success="True" time="0.0000057" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users (IsActive = null)\\r\\nGROUP BY Country\\r\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:\\\&quot;...)" executed="True" result="Success" success="True" time="0.000009" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users (IsActive = true)\\r\\nWHERE Age BETWEEN \&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;Where\\\&quot;:{\\\&quot;Between\\\&quot;:{\\\&quot;Min\\\&quot;...)" executed="True" result="Success" success="True" time="0.0000075" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users (IsActive = true) SELECT Age \&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;Select\\\&quot;:[{\\\&quot;Expression\\\&quot;:\\\&quot;\&quot;...)" executed="True" result="Success" success="True" time="0.0000043" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users GROUP BY Country WHERE count() &gt; 100 SE\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:\\\&quot;...)" executed="True" result="Success" success="True" time="0.0000082" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;}\&quot;)" executed="True" result="Success" success="True" time="0.0000035" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users GROUP BY array(Tags[])\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:{\&quot;...)" executed="True" result="Success" success="True" time="0.0000093" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;from Orders\\r\\ngroup by Month(OrderedAt) as month,\&quot;..., json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Orders\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:\&quot;...)" executed="True" result="Success" success="True" time="0.0000159" />
              <test-case name="FastTests.Server.Documents.Queries.Parser.ComplexQueries.CanParseFullQueries(q: \&quot;FROM Users GROUP BY 1 SELECT count()\&quot;, json: \&quot;{\\\&quot;From\\\&quot;:\\\&quot;Users\\\&quot;,\\\&quot;GroupBy\\\&quot;:[{\\\&quot;Expression\\\&quot;:1\&quot;...)" executed="True" result="Success" success="True" time="0.0000054" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.NotificationCenter.NotificationCenterTests" result="Success" success="True" time="1.529">
            <results>
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_dismiss_persistent_action_and_get_notified_about_it" executed="True" result="Success" success="True" time="0.0885405" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Request_latency_hints_are_stored_and_can_be_read" executed="True" result="Success" success="True" time="0.0837034" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_get_alerts_count" executed="True" result="Success" success="True" time="0.0670019" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_update_alert" executed="True" result="Success" success="True" time="0.0621185" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_postpone_notification_forever_then_next_notifictions_wont_be_sent" executed="True" result="Success" success="True" time="0.073156" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_postpone_persistent_action_and_get_notified_about_it" executed="True" result="Success" success="True" time="0.0639518" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Should_get_notification" executed="True" result="Success" success="True" time="0.0689248" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Repeated_alert_should_retain_postpone_until_date" executed="True" result="Success" success="True" time="0.0698711" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Should_persist_operation_if_result_requires_persistance" executed="True" result="Success" success="True" time="0.0702113" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Should_be_notified_about_changed_database_stats" executed="True" result="Success" success="True" time="0.2850986" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Should_send_postponed_notification_when_postpone_date_reached" executed="True" result="Success" success="True" time="0.2158211" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Persistent_actions_are_returned_in_creation_order" executed="True" result="Success" success="True" time="0.066612" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Persistent_action_is_stored_and_can_be_read" executed="True" result="Success" success="True" time="0.0699901" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Can_filter_out_postponed_actions" executed="True" result="Success" success="True" time="0.0627537" />
              <test-case name="FastTests.Server.NotificationCenter.NotificationCenterTests.Duplicated_notification_should_not_arrive_before_postponed_until_date" executed="True" result="Success" success="True" time="0.1809041" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6041" result="Success" success="True" time="0.294">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6041.Reduction_should_ignore_overflow_pages(numberOfDocs: 1)" executed="True" result="Success" success="True" time="0.1850581" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6041.Reduction_should_ignore_overflow_pages(numberOfDocs: 128)" executed="True" result="Success" success="True" time="0.1084958" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Lazy.MultiGetOperations" result="Success" success="True" time="0.154">
            <results>
              <test-case name="FastTests.Client.Lazy.MultiGetOperations.WithPaging" executed="True" result="Success" success="True" time="0.0862285" />
              <test-case name="FastTests.Client.Lazy.MultiGetOperations.UnlessAccessedLazyLoadsAreNoOp" executed="True" result="Success" success="True" time="0.0674362" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8917" result="Success" success="True" time="0.181">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8917.can_change_from_array_to_null" executed="True" result="Success" success="True" time="0.0867452" />
              <test-case name="FastTests.Issues.RavenDB_8917.can_change_from_null_to_array" executed="True" result="Success" success="True" time="0.0945879" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Attachments.AttachmentsCrud" result="Success" success="True" time="2.544">
            <results>
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAttachmentAndModifyDocumentInTheSameSession_WithoutAnotherLoad" executed="True" result="Success" success="True" time="0.1035468" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.DeleteAttachments" executed="True" result="Success" success="True" time="0.148253" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.ThrowIfStreamWithPositionNotZero" executed="True" result="Success" success="True" time="0.0857318" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAttachmentAndModifyDocument" executed="True" result="Success" success="True" time="0.0867711" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAttachmentThanEvictAndModifyDocumentInTheSameSession" executed="True" result="Success" success="True" time="0.1075899" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PreserveAttachmentsInMetadataAfterPutDocumentWithoutMetadata" executed="True" result="Success" success="True" time="0.0997736" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAndDeleteAttachmentsWithTheSameStream_AlsoTestBigStreams" executed="True" result="Success" success="True" time="0.4652039" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.CanPatchWithoutConflictsOnAttachments" executed="True" result="Success" success="True" time="0.0989968" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PreserveAttachmentsInMetadataAfterPutDocument" executed="True" result="Success" success="True" time="0.1100623" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.OverwriteAttachmentWithStreamOnly" executed="True" result="Success" success="True" time="0.0958132" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutSameAttachmentTwiceDifferentContentType" executed="True" result="Success" success="True" time="0.0977281" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAndGetSpecialChar(nameAndContentType: \&quot;\\t\&quot;, expectedContentType: null)" executed="True" result="Success" success="True" time="0.0950525" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAndGetSpecialChar(nameAndContentType: \&quot;\\\\\&quot;, expectedContentType: \&quot;\\\\\&quot;)" executed="True" result="Success" success="True" time="0.0934487" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAndGetSpecialChar(nameAndContentType: \&quot;/\&quot;, expectedContentType: \&quot;/\&quot;)" executed="True" result="Success" success="True" time="0.0913222" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAndGetSpecialChar(nameAndContentType: \&quot;5\&quot;, expectedContentType: \&quot;5\&quot;)" executed="True" result="Success" success="True" time="0.2575448" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutSameAttachmentTwice_AlsoMakeSureThatTheStreamIsNotDisposedAfterCallingPutAttachment" executed="True" result="Success" success="True" time="0.0972417" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.ThrowNotReadableStream" executed="True" result="Success" success="True" time="0.0896324" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.DeleteDocumentWithAttachmentsThatHaveTheSameStream" executed="True" result="Success" success="True" time="0.1008981" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAttachmentAndModifyDocumentInTheSameSession" executed="True" result="Success" success="True" time="0.0997269" />
              <test-case name="FastTests.Client.Attachments.AttachmentsCrud.PutAttachments" executed="True" result="Success" success="True" time="0.119596" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.SubscriptionScripts" result="Success" success="True" time="2.307">
            <results>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleNestedDates" executed="True" result="Success" success="True" time="0.1903162" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleDates_Today" executed="True" result="Success" success="True" time="0.1735172" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleSelect" executed="True" result="Success" success="True" time="0.1861042" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleBooleanConstantsAndCount" executed="True" result="Success" success="True" time="0.1859096" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleDates_UtcNow" executed="True" result="Success" success="True" time="0.2262263" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleAll_Nested" executed="True" result="Success" success="True" time="0.1360377" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleDates_Year" executed="True" result="Success" success="True" time="0.1719664" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleDates_New" executed="True" result="Success" success="True" time="0.1795519" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleWhere" executed="True" result="Success" success="True" time="0.1821553" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleAll" executed="True" result="Success" success="True" time="0.1634815" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleCountAsProperty" executed="True" result="Success" success="True" time="0.1742871" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleAny" executed="True" result="Success" success="True" time="0.1532105" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionScripts.CanHandleDates_Now" executed="True" result="Success" success="True" time="0.1846307" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Operations.BasicOperationsTests" result="Success" success="True" time="0.221">
            <results>
              <test-case name="FastTests.Server.Documents.Operations.BasicOperationsTests.Can_serialize_in_progress_state_to_json" executed="True" result="Success" success="True" time="0.0008722" />
              <test-case name="FastTests.Server.Documents.Operations.BasicOperationsTests.Can_serialize_completed_state_to_json" executed="True" result="Success" success="True" time="0.0006799" />
              <test-case name="FastTests.Server.Documents.Operations.BasicOperationsTests.Can_notify_about_exception_in_operation" executed="True" result="Success" success="True" time="0.0767638" />
              <test-case name="FastTests.Server.Documents.Operations.BasicOperationsTests.Can_notify_about_operations_progress_and_completion" executed="True" result="Success" success="True" time="0.0748583" />
              <test-case name="FastTests.Server.Documents.Operations.BasicOperationsTests.Should_be_able_to_cancel_operation" executed="True" result="Success" success="True" time="0.0676372" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Update" result="Success" success="True" time="0.085">
            <results>
              <test-case name="FastTests.Client.Update.Update_Document" executed="True" result="Success" success="True" time="0.085086" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.NextAndSeedIdentities" result="Success" success="True" time="0.257">
            <results>
              <test-case name="FastTests.Client.NextAndSeedIdentities.NextIdentityFor" executed="True" result="Success" success="True" time="0.1329828" />
              <test-case name="FastTests.Client.NextAndSeedIdentities.SeedIdentityFor" executed="True" result="Success" success="True" time="0.1242194" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_8450" result="Success" success="True" time="0.114">
            <results>
              <test-case name="FastTests.Issues.RavenDB_8450.CanGetSubscriptionsResultsWithEscapeHandling" executed="True" result="Success" success="True" time="0.1140643" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableParsing" result="Success" success="True" time="0.011">
            <results>
              <test-case name="FastTests.Blittable.BlittableParsing.CanParseProperly" executed="True" result="Success" success="True" time="0.0113386" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.DocumentQueryWithDefaultOperator" result="Success" success="True" time="0.140">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.DocumentQueryWithDefaultOperator.QueryWithOrOperators" executed="True" result="Success" success="True" time="0.1400844" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.Basic" result="Success" success="True" time="3.155">
            <results>
              <test-case name="FastTests.Voron.Trees.Basic.CanAddVeryLargeValue" executed="True" result="Success" success="True" time="0.5112989" />
              <test-case name="FastTests.Voron.Trees.Basic.CanAddAndRead" executed="True" result="Success" success="True" time="0.4378793" />
              <test-case name="FastTests.Voron.Trees.Basic.CanAddAndReadStats" executed="True" result="Success" success="True" time="0.4354171" />
              <test-case name="FastTests.Voron.Trees.Basic.PageSplitsAllAround" executed="True" result="Success" success="True" time="0.4429891" />
              <test-case name="FastTests.Voron.Trees.Basic.CanAddEnoughToCausePageSplit" executed="True" result="Success" success="True" time="0.4496463" />
              <test-case name="FastTests.Voron.Trees.Basic.AfterPageSplitAllDataIsValid" executed="True" result="Success" success="True" time="0.4496827" />
              <test-case name="FastTests.Voron.Trees.Basic.CanAdd" executed="True" result="Success" success="True" time="0.4278688" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Blittable.Serialization" result="Success" success="True" time="0.187">
            <results>
              <test-case name="FastTests.Client.Blittable.Serialization.Can_Store_And_Load_Boolean_And_Nullable_Boolean" executed="True" result="Success" success="True" time="0.0880789" />
              <test-case name="FastTests.Client.Blittable.Serialization.Can_Store_And_Load_Nullable" executed="True" result="Success" success="True" time="0.0991653" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.MultiTransactions" result="Success" success="True" time="0.018">
            <results>
              <test-case name="FastTests.Voron.Storage.MultiTransactions.ShouldWork" executed="True" result="Success" success="True" time="0.0177287" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.BulkInserts" result="Success" success="True" time="0.420">
            <results>
              <test-case name="FastTests.Client.BulkInserts.Simple_Bulk_Insert(useSsl: False)" executed="True" result="Success" success="True" time="0.2199783" />
              <test-case name="FastTests.Client.BulkInserts.Bulk_Insert_Should_Throw_On_StoreAsync_Concurrent_Calls" executed="True" result="Success" success="True" time="0.099721" />
              <test-case name="FastTests.Client.BulkInserts.Simple_Bulk_Insert_Should_Work" executed="True" result="Success" success="True" time="0.1007705" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.PartialParsingBugs" result="Success" success="True" time="0.006">
            <results>
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Neg1\\\&quot;:-9223372036854775808,\\\&quot;Neg\\\&quot;:-6}\&quot;)" executed="True" result="Success" success="True" time="0.0056038" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: Infinity}\&quot;)" executed="True" result="Success" success="True" time="0.0000801" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: -Infinity}\&quot;)" executed="True" result="Success" success="True" time="0.0000265" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: NaN}\&quot;)" executed="True" result="Success" success="True" time="0.0000247" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: false}\&quot;)" executed="True" result="Success" success="True" time="0.0000203" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: true}\&quot;)" executed="True" result="Success" success="True" time="0.0000192" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: -1}\&quot;)" executed="True" result="Success" success="True" time="0.0000196" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Age\\\&quot;:6,\\\&quot;Neg\\\&quot;:-6,\\\&quot;IntMax\\\&quot;:2147483647}\&quot;)" executed="True" result="Success" success="True" time="0.0000291" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;Val\\\&quot;: null}\&quot;)" executed="True" result="Success" success="True" time="0.0000243" />
              <test-case name="FastTests.Blittable.PartialParsingBugs.TestOneCharAtATime(s: \&quot;{\\\&quot;TotalResults\\\&quot;:0,\\\&quot;SkippedResults\\\&quot;:0,\\\&quot;Duratio\&quot;...)" executed="True" result="Success" success="True" time="0.0000844" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Backups.RavenDB_3115" result="Success" success="True" time="0.153">
            <results>
              <test-case name="FastTests.Voron.Backups.RavenDB_3115.ShouldCorrectlyLoadAfterRestartIfIncrementalBackupWasDone" executed="True" result="Success" success="True" time="0.1531609" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Static.RavenDB_7691" result="Success" success="True" time="1.722">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Static.RavenDB_7691.CanIndexBigNumbersEdgeCases" executed="True" result="Success" success="True" time="1.6202813" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.RavenDB_7691.ClientAPIDoesNotSupportDecimalBiggerThenDouble" executed="True" result="Success" success="True" time="0.1014718" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries" result="Success" success="True" time="1.029">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Failure_match_for_map_index_containing_the_same_field_names" executed="True" result="Success" success="True" time="0.0877266" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Partial_match_when_sort_field_is_not_mapped" executed="True" result="Success" success="True" time="0.0798861" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Partial_match_for_map_reduce_index_not_having_all_map_fields_defined_in_query" executed="True" result="Success" success="True" time="0.0802759" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Partial_match_if_analyzer_is_required_on_group_by_field" executed="True" result="Success" success="True" time="0.150627" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Failure_match_for_map_reduce_index_not_matching_exactly_group_by_fields" executed="True" result="Success" success="True" time="0.1213242" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Complete_match_for_single_matching_index_with_sort_options" executed="True" result="Success" success="True" time="0.0865286" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Partial_match_if_exact_is_required_on_group_by_field" executed="True" result="Success" success="True" time="0.1480809" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Complete_match_and_surpassed_map_reduce_index_is_choosen" executed="True" result="Success" success="True" time="0.113994" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Failure_match_if_there_is_no_index" executed="True" result="Success" success="True" time="0.0729215" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.MapReduce.MatchingAutoMapReduceIndexesForDynamicQueries.Failure_match_for_map_reduce_index_having_different_aggregation_function" executed="True" result="Success" success="True" time="0.0871497" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.QueriesWithCustomFunctions" result="Success" success="True" time="9.343">
            <results>
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_String_Support" executed="True" result="Success" success="True" time="0.1412678" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Project_With_JsonPropertyAttribute" executed="True" result="Success" success="True" time="0.0848245" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_DateTime_Properties" executed="True" result="Success" success="True" time="0.1053213" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Multiple_Where_And_Let" executed="True" result="Success" success="True" time="0.1487046" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Query_On_Index_With_Load_Into_Class" executed="True" result="Success" success="True" time="0.2432466" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Load_Old_Document_With_Undefined_Member" executed="True" result="Success" success="True" time="0.1154402" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Load_With_Argument_That_Has_Computation" executed="True" result="Success" success="True" time="0.1285713" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_GetMetadataFor_Async" executed="True" result="Success" success="True" time="0.1216434" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Define_Custom_Functions_Inside_Select_Async" executed="True" result="Success" success="True" time="0.1314099" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Project_Into_Class_With_Let" executed="True" result="Success" success="True" time="0.0944873" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Do_Null_Comparison_On_Undefined_Member" executed="True" result="Success" success="True" time="0.1133127" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Multiple_Lets_Async" executed="True" result="Success" success="True" time="0.1103009" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_DateTime_Object" executed="True" result="Success" success="True" time="0.1041325" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Complex_Loads" executed="True" result="Success" success="True" time="0.1290231" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Null_Coalescing_Support" executed="True" result="Success" success="True" time="0.0913066" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_DateTime_Properties_Async" executed="True" result="Success" success="True" time="0.1123321" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Use_DefaultIfEmpty" executed="True" result="Success" success="True" time="0.1367527" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Let_Async" executed="True" result="Success" success="True" time="0.1092995" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Should_Throw_With_Proper_Message_When_Using_Wrong_Load" executed="True" result="Success" success="True" time="0.0995077" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Project_With_Json_Property_Rename" executed="True" result="Success" success="True" time="0.1168285" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Should_Throw_When_Let_Is_Before_Where_Async" executed="True" result="Success" success="True" time="0.0960699" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Multiple_Where_And_Let_Async" executed="True" result="Success" success="True" time="0.1469424" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Nested_Conditional_Support" executed="True" result="Success" success="True" time="0.1189461" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Sum" executed="True" result="Success" success="True" time="0.1217431" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Fuctions_With_Nested_Loads_Complex" executed="True" result="Success" success="True" time="0.1188445" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Fuctions_With_Nested_Loads_Simple" executed="True" result="Success" success="True" time="0.1032707" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load_List_Async" executed="True" result="Success" success="True" time="0.1397923" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Project_Where_Id_StartsWith" executed="True" result="Success" success="True" time="0.1204088" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Timespan_Async" executed="True" result="Success" success="True" time="0.0999851" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Linq_Methods_Support" executed="True" result="Success" success="True" time="0.1642753" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_ToString" executed="True" result="Success" success="True" time="0.1800482" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Numbers_And_Booleans" executed="True" result="Success" success="True" time="0.1041864" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_First_And_FirstOrDefault_Support" executed="True" result="Success" success="True" time="0.1121375" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_ToList_And_ToArray" executed="True" result="Success" success="True" time="0.1024921" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Escape_Hatch" executed="True" result="Success" success="True" time="0.1094786" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_RavenQueryMetadata" executed="True" result="Success" success="True" time="0.0903828" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_project_id_propery_to_any_name" executed="True" result="Success" success="True" time="0.1080622" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Load_SingleDocument_When_Declare" executed="True" result="Success" success="True" time="0.1231845" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_SelectMany_From_Dictionary" executed="True" result="Success" success="True" time="0.1321342" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Project_Into_Class" executed="True" result="Success" success="True" time="0.0992496" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Multiple_Loads" executed="True" result="Success" success="True" time="0.1496611" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Define_Custom_Functions_Inside_Select" executed="True" result="Success" success="True" time="0.1512047" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Fuctions_With_Let_And_Load" executed="True" result="Success" success="True" time="0.0960954" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Multiple_Lets" executed="True" result="Success" success="True" time="0.0974418" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_ToDictionary_Support" executed="True" result="Success" success="True" time="0.126367" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_ValueTypeParse_Support" executed="True" result="Success" success="True" time="0.1318454" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Math_Support" executed="True" result="Success" success="True" time="0.1012213" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.IsNullOrEmptySupport" executed="True" result="Success" success="True" time="0.1330612" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Multiple_Loads_Async" executed="True" result="Success" success="True" time="0.2607192" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load_List" executed="True" result="Success" success="True" time="0.1406124" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Should_Add_An_Alias_To_Where_Tokens" executed="True" result="Success" success="True" time="0.16147" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.IsNullOrWhitespaceSupport" executed="True" result="Success" success="True" time="0.1045387" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.QueryCmpXchgWhere" executed="True" result="Success" success="True" time="0.1565363" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Inside_Select_Nested" executed="True" result="Success" success="True" time="0.1034604" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Simple_Let" executed="True" result="Success" success="True" time="0.0910054" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load_Array" executed="True" result="Success" success="True" time="0.1366142" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Escape_Hatch_With_Path" executed="True" result="Success" success="True" time="0.1298488" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Numbers_And_Booleans_Async" executed="True" result="Success" success="True" time="0.1044814" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load" executed="True" result="Success" success="True" time="0.1516373" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Nested_Query" executed="True" result="Success" success="True" time="0.1222768" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Can_Load_Static_Value" executed="True" result="Success" success="True" time="0.1354291" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Should_quote_alias_if_its_a_reserved_word" executed="True" result="Success" success="True" time="0.1182292" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Timespan" executed="True" result="Success" success="True" time="0.0925876" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.QueryCmpXchgValue" executed="True" result="Success" success="True" time="0.1277811" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.QueryCmpXchgWhereWithProperty" executed="False" result="Skipped" time="0">
                <reason>
                  <message>RavenDB-9850</message>
                </reason>
              </test-case>
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_GetMetadataFor" executed="True" result="Success" success="True" time="0.1077033" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Should_Throw_When_Let_Is_Before_Where" executed="True" result="Success" success="True" time="0.0950703" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Simple_Let_Async" executed="True" result="Success" success="True" time="0.0877361" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Let" executed="True" result="Success" success="True" time="0.0968459" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Query_On_Index_With_Load" executed="True" result="Success" success="True" time="0.1681584" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_SelectMany" executed="True" result="Success" success="True" time="0.124724" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Fuctions_With_Let_And_Load_Async" executed="True" result="Success" success="True" time="0.1113165" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load_Async" executed="True" result="Success" success="True" time="0.1403339" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Function_With_Where_and_Load_Array_Async" executed="True" result="Success" success="True" time="0.1387982" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.QueryCmpXchgInnerValue" executed="True" result="Success" success="True" time="0.1111364" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_With_Escape_Hatch_Inside_Let" executed="True" result="Success" success="True" time="0.1052528" />
              <test-case name="FastTests.Client.QueriesWithCustomFunctions.Custom_Functions_Inside_Select_Nested_Async" executed="True" result="Success" success="True" time="0.1028167" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Blittable.BlittableJsonEqualityTests" result="Success" success="True" time="0.004">
            <results>
              <test-case name="FastTests.Blittable.BlittableJsonEqualityTests.Equals_even_though_order_of_properties_is_different" executed="True" result="Success" success="True" time="0.0036831" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.Rebalance" result="Success" success="True" time="1.731">
            <results>
              <test-case name="FastTests.Voron.Trees.Rebalance.CanMergeLeft" executed="True" result="Success" success="True" time="0.5839216" />
              <test-case name="FastTests.Voron.Trees.Rebalance.CanMergeRight" executed="True" result="Success" success="True" time="0.6245935" />
              <test-case name="FastTests.Voron.Trees.Rebalance.StressTest" executed="True" result="Success" success="True" time="0.522239" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.ValidHeaders" result="Success" success="True" time="0.014">
            <results>
              <test-case name="FastTests.Voron.ValidHeaders.ValidateNoOverlap" executed="True" result="Success" success="True" time="0.0028743" />
              <test-case name="FastTests.Voron.ValidHeaders.TransactionHeader(seed: 154017554)" executed="True" result="Success" success="True" time="0.0089788" />
              <test-case name="FastTests.Voron.ValidHeaders.FileHeader" executed="True" result="Success" success="True" time="0.0020205" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.NamedSubscriptions" result="Success" success="True" time="0.110">
            <results>
              <test-case name="FastTests.Client.Subscriptions.NamedSubscriptions.CanNameAndOpenWithNameOnly" executed="True" result="Success" success="True" time="0.1096788" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Query" result="Success" success="True" time="0.913">
            <results>
              <test-case name="FastTests.Client.Query.Query_By_Index" executed="True" result="Success" success="True" time="0.1593869" />
              <test-case name="FastTests.Client.Query.Query_With_Customize" executed="True" result="Success" success="True" time="0.1367904" />
              <test-case name="FastTests.Client.Query.Query_Simple" executed="True" result="Success" success="True" time="0.0992462" />
              <test-case name="FastTests.Client.Query.RawQuery_with_transformation_function_should_work" executed="True" result="Success" success="True" time="0.1439189" />
              <test-case name="FastTests.Client.Query.Query_With_Where_Clause" executed="True" result="Success" success="True" time="0.1246533" />
              <test-case name="FastTests.Client.Query.LinqQuery_with_transformation_function_should_work" executed="True" result="Success" success="True" time="0.1388759" />
              <test-case name="FastTests.Client.Query.Query_Long_Request" executed="True" result="Success" success="True" time="0.1102594" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Storage.PageHandling" result="Success" success="True" time="1.580">
            <results>
              <test-case name="FastTests.Voron.Storage.PageHandling.ReadModifyReadPagesInSameTransaction" executed="True" result="Success" success="True" time="0.5376118" />
              <test-case name="FastTests.Voron.Storage.PageHandling.EnsureDataPointerChangesAfterModifyInSameTransaction" executed="True" result="Success" success="True" time="0.5298549" />
              <test-case name="FastTests.Voron.Storage.PageHandling.AllocateOverflowPages" executed="True" result="Success" success="True" time="0.5123309" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing" result="Success" success="True" time="2.805">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.IndexLoadErrorCreatesFaultyInMemoryIndexFakeAndAddsAlert" executed="True" result="Success" success="True" time="0.286553" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.CanDeleteFaultyIndex" executed="True" result="Success" success="True" time="0.3011665" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.WriteErrors" executed="True" result="Success" success="True" time="0.0895128" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.CheckDispose" executed="True" result="Success" success="True" time="0.1177705" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.IndexCreationOptions" executed="True" result="Success" success="True" time="0.0920888" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.CanPersist" executed="True" result="Success" success="True" time="0.3942164" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.Errors" executed="True" result="Success" success="True" time="0.2050027" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.SimpleIndexing" executed="True" result="Success" success="True" time="0.1414909" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.Errors2" executed="True" result="Success" success="True" time="0.1688356" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.AutoIndexesShouldBeMarkedAsIdleAndDeleted" executed="True" result="Success" success="True" time="0.145277" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.CanReset" executed="True" result="Success" success="True" time="0.4253423" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.CanDelete" executed="True" result="Success" success="True" time="0.3420588" />
              <test-case name="FastTests.Server.Documents.Indexing.Auto.BasicAutoMapIndexing.LockMode" executed="True" result="Success" success="True" time="0.0952414" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Json.BlittableJsonTraverserTests" result="Success" success="True" time="0.021">
            <results>
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_values_nested_in_array_as_objects" executed="True" result="Success" success="True" time="0.0031853" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_value_nested_in_nested_object_of_array_of_arrays" executed="True" result="Success" success="True" time="0.003376" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_array_values" executed="True" result="Success" success="True" time="0.0014437" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_values_of_multidimensional_array" executed="True" result="Success" success="True" time="0.0054691" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_nested_values" executed="True" result="Success" success="True" time="0.0014512" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_values_nested_in_array" executed="True" result="Success" success="True" time="0.0025529" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_value_nested_in_object_of_array_of_arrays" executed="True" result="Success" success="True" time="0.0031248" />
              <test-case name="FastTests.Server.Json.BlittableJsonTraverserTests.Reads_simple_value" executed="True" result="Success" success="True" time="0.0007324" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.SubscriptionsPaths" result="Success" success="True" time="3.500">
            <results>
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsPaths.PositivePathWithCollectionsUntyped" executed="True" result="Success" success="True" time="1.1152495" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsPaths.NegativePathWithCollectionsTyped" executed="True" result="Success" success="True" time="1.1403532" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsPaths.PositivePathWithCollectionsTyped" executed="True" result="Success" success="True" time="1.1213669" />
              <test-case name="FastTests.Client.Subscriptions.SubscriptionsPaths.NegativePathWithCollectionsUntyped" executed="True" result="Success" success="True" time="0.1234824" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.Static.BasicStaticMapReduceIndexing" result="Success" success="True" time="0.840">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapReduceIndexing.Static_map_reduce_index_with_multiple_outputs_per_document" executed="True" result="Success" success="True" time="0.117501" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapReduceIndexing.CanPersist" executed="True" result="Success" success="True" time="0.5183702" />
              <test-case name="FastTests.Server.Documents.Indexing.Static.BasicStaticMapReduceIndexing.The_simpliest_static_map_reduce_index" executed="True" result="Success" success="True" time="0.2043511" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.CanParseToObjectFromBlittable" result="Success" success="True" time="0.025">
            <results>
              <test-case name="FastTests.Client.CanParseToObjectFromBlittable.Directly" executed="True" result="Success" success="True" time="0.0248821" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.FixedSize.LargeFixedSizeTreeBugs" result="Success" success="True" time="0.568">
            <results>
              <test-case name="FastTests.Voron.FixedSize.LargeFixedSizeTreeBugs.DeleteRangeShouldModifyPage" executed="True" result="Success" success="True" time="0.5682753" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Backups.BackupToOneZipFile" result="Success" success="True" time="0.000">
            <results>
              <test-case name="FastTests.Voron.Backups.BackupToOneZipFile.FullBackupToOneZipFile" executed="False" result="Skipped" time="0">
                <reason>
                  <message>Should add database record to backup and restore</message>
                </reason>
              </test-case>
              <test-case name="FastTests.Voron.Backups.BackupToOneZipFile.IncrementalBackupToOneZipFile" executed="False" result="Skipped" time="0">
                <reason>
                  <message>Should add database record to backup and restore</message>
                </reason>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.BulkInsert.BulkInserts" result="Success" success="True" time="0.540">
            <results>
              <test-case name="FastTests.Client.BulkInsert.BulkInserts.KilledTooEarly" executed="True" result="Success" success="True" time="0.1418549">
              </test-case>
              <test-case name="FastTests.Client.BulkInsert.BulkInserts.ShouldNotAcceptIdsEndingWithPipeLine" executed="True" result="Success" success="True" time="0.0677364" />
              <test-case name="FastTests.Client.BulkInsert.BulkInserts.AsyncSimpleBulkInsertShouldWork" executed="True" result="Success" success="True" time="0.1292912" />
              <test-case name="FastTests.Client.BulkInsert.BulkInserts.CanModifyMetadataWithBulkInsert" executed="True" result="Success" success="True" time="0.1026122" />
              <test-case name="FastTests.Client.BulkInsert.BulkInserts.SimpleBulkInsertShouldWork" executed="True" result="Success" success="True" time="0.0982664" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Bugs.RavenDB_9153" result="Success" success="True" time="0.534">
            <results>
              <test-case name="FastTests.Voron.Bugs.RavenDB_9153.Overflow_shrink_should_decrease_number_of_allocated_pages_in_scratch" executed="True" result="Success" success="True" time="0.5335913" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9030" result="Success" success="True" time="0.105">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9030.InQueryOnMultipleIdsShouldNotThrowTooManyBooleanClauses" executed="True" result="Success" success="True" time="0.1048553" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Routing.TrieTests" result="Success" success="True" time="0.013">
            <results>
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryWithRoot" executed="True" result="Success" success="True" time="0.0115293" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrieWithParams(url: \&quot;databases/northwind/docs\&quot;)" executed="True" result="Success" success="True" time="0.000789" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrieWithParams(url: \&quot;databases\&quot;)" executed="True" result="Success" success="True" time="0.0000272" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrieWithParams(url: \&quot;databases/northwind/indexes/Raven/DocumentsByEntit\&quot;...)" executed="True" result="Success" success="True" time="0.0000192" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrieWithParams(url: \&quot;Databases/northwind/Docs\&quot;)" executed="True" result="Success" success="True" time="0.0000177" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrieWithParams(url: \&quot;Databases/רוח-צפונית/Docs\&quot;)" executed="True" result="Success" success="True" time="0.0000207" />
              <test-case name="FastTests.Server.Routing.TrieTests.CanQueryTrie" executed="True" result="Success" success="True" time="0.0006971" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Queries.RangeQueryTest" result="Success" success="True" time="0.272">
            <results>
              <test-case name="FastTests.Client.Queries.RangeQueryTest.RangeQuery" executed="True" result="Success" success="True" time="0.2716204" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Sparrow.ChangeThreadPriorityTest" result="Success" success="True" time="0.002">
            <results>
              <test-case name="FastTests.Sparrow.ChangeThreadPriorityTest.StartChangeThreadPriority" executed="True" result="Success" success="True" time="0.0018805" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Tables.SecondayIndex" result="Success" success="True" time="1.654">
            <results>
              <test-case name="FastTests.Voron.Tables.SecondayIndex.CanInsertThenUpdateThenBySecondary" executed="True" result="Success" success="True" time="0.5718998" />
              <test-case name="FastTests.Voron.Tables.SecondayIndex.CanInsertThenDeleteBySecondary" executed="True" result="Success" success="True" time="0.5438101" />
              <test-case name="FastTests.Voron.Tables.SecondayIndex.CanInsertThenReadBySecondary" executed="True" result="Success" success="True" time="0.5384162" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Trees.TreeStateTests" result="Success" success="True" time="3.915">
            <results>
              <test-case name="FastTests.Voron.Trees.TreeStateTests.HasReducedNumberOfPagesAfterRemovingHalfOfEntries" executed="True" result="Success" success="True" time="0.5577898" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.AllPagesCantHasDuplicatesInMultiTrees" executed="True" result="Success" success="True" time="0.5461922" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.TotalPageCountConsistsOfLeafBrancheAndOverflowPages(regularItemsCount: 5, overflowsCount: 2)" executed="True" result="Success" success="True" time="0.545852" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.TotalPageCountConsistsOfLeafBrancheAndOverflowPages(regularItemsCount: 35, overflowsCount: 13)" executed="True" result="Success" success="True" time="0.5313037" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.TotalPageCountConsistsOfLeafBrancheAndOverflowPages(regularItemsCount: 256, overflowsCount: 32)" executed="True" result="Success" success="True" time="0.5296222" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.MustNotProduceNegativePageCountNumber" executed="True" result="Success" success="True" time="0.5716769" />
              <test-case name="FastTests.Voron.Trees.TreeStateTests.HasReducedTreeDepthValueAfterRemovingEntries" executed="True" result="Success" success="True" time="0.6330511" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries" result="Success" success="True" time="2.463">
            <results>
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Numeric_range_where_clause" executed="True" result="Success" success="True" time="0.1837503" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Sorting_by_integers" executed="True" result="Success" success="True" time="0.1576102" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Collection_query" executed="True" result="Success" success="True" time="0.118218" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Empty_query" executed="True" result="Success" success="True" time="0.1152838" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Can_query_on_dictionary" executed="True" result="Success" success="True" time="0.326198" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Numeric_between_clause" executed="True" result="Success" success="True" time="0.1501508" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Partial_match" executed="True" result="Success" success="True" time="0.1554008" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Sorting_by_nested_string_field" executed="True" result="Success" success="True" time="0.1358775" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Numeric_where_equals_clause" executed="True" result="Success" success="True" time="0.1418779" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.String_where_clause" executed="True" result="Success" success="True" time="0.1547027" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Can_project_in_map" executed="True" result="Success" success="True" time="0.2156085" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Where_clause_and_sorting" executed="True" result="Success" success="True" time="0.1410949" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Sorting_by_doubles" executed="True" result="Success" success="True" time="0.1416358" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Sorting_by_nested_integer_field" executed="True" result="Success" success="True" time="0.1669283" />
              <test-case name="FastTests.Server.Documents.Queries.Dynamic.Map.BasicDynamicMapQueries.Sorting_by_strings" executed="True" result="Success" success="True" time="0.1589566" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.DocumentsCrud" result="Success" success="True" time="2.765">
            <results>
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_Existing" executed="True" result="Success" success="True" time="0.1381556" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanDelete(id: \&quot;users/1\&quot;)" executed="True" result="Success" success="True" time="0.1233759" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanDelete(id: \&quot;USERs/1\&quot;)" executed="True" result="Success" success="True" time="0.1279901" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanDelete(id: \&quot;לכובע שלי שלוש פינות\&quot;)" executed="True" result="Success" success="True" time="0.1314053" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_OnDeleteNotThere" executed="True" result="Success" success="True" time="0.1062348" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.EtagsArePersistedWithDeletes" executed="True" result="Success" success="True" time="0.3181486" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanQueryByGlobalEtag" executed="True" result="Success" success="True" time="0.1242718" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.PutDocumentWithoutId" executed="True" result="Success" success="True" time="0.1474239" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_New" executed="True" result="Success" success="True" time="0.1382574" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanQueryByCollectionEtag" executed="True" result="Success" success="True" time="0.1344699" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_VerifyNew" executed="True" result="Success" success="True" time="0.1252685" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.EtagsArePersisted" executed="True" result="Success" success="True" time="0.2142694" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_ShouldBeNew" executed="True" result="Success" success="True" time="0.1374069" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.WillVerifyEtags_OnDeleteExisting" executed="True" result="Success" success="True" time="0.1327738" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.PutAndGetDocumentById(id: \&quot;users/1\&quot;)" executed="True" result="Success" success="True" time="0.1336961" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.PutAndGetDocumentById(id: \&quot;USERs/1\&quot;)" executed="True" result="Success" success="True" time="0.1269074" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.PutAndGetDocumentById(id: \&quot;לכובע שלי שלוש פינות\&quot;)" executed="True" result="Success" success="True" time="0.1255694" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.PutAndGetDocumentById(id: \&quot;users/111112222233333333333444444445555556\&quot;)" executed="True" result="Success" success="True" time="0.1336268" />
              <test-case name="FastTests.Server.Documents.DocumentsCrud.CanQueryByPrefix" executed="True" result="Success" success="True" time="0.1461383" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Subscriptions.RavenDB_3193" result="Success" success="True" time="0.269">
            <results>
              <test-case name="FastTests.Client.Subscriptions.RavenDB_3193.ShouldRespectCollectionCriteria" executed="True" result="Success" success="True" time="0.2693339" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9955" result="Success" success="True" time="0.317">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9955.JsConvertorShouldIgnoreValueProperyOfNullable" executed="True" result="Success" success="True" time="0.1738174" />
              <test-case name="FastTests.Issues.RavenDB_9955.ToDictionaryWithNullableValue" executed="True" result="Success" success="True" time="0.1433114" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Revisions.RevisionsReplication" result="Success" success="True" time="2.303">
            <results>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.RevisionsOrder" executed="True" result="Success" success="True" time="0.3321218">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.CanGetAllRevisionsFor" executed="True" result="Success" success="True" time="0.250464">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.WillDeleteOldRevisions" executed="True" result="Success" success="True" time="0.4013059">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.GetRevisionsBinEntries(useSession: False)" executed="True" result="Success" success="True" time="0.532835">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.GetRevisionsBinEntries(useSession: True)" executed="True" result="Success" success="True" time="0.4699183">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsReplication.CanCheckIfDocumentHasRevisions" executed="True" result="Success" success="True" time="0.3163625">
                <properties>
                  <property name="Category" value="Cluster" />
                </properties>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6019" result="Success" success="True" time="0.854">
            <results>
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6019.Can_specify_multiple_map_functions_for_the_same_collection(numberOfDocs: 1)" executed="True" result="Success" success="True" time="0.3301937" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6019.Can_specify_multiple_map_functions_for_the_same_collection(numberOfDocs: 2)" executed="True" result="Success" success="True" time="0.1776636" />
              <test-case name="FastTests.Server.Documents.Indexing.MapReduce.RavenDB_6019.Can_specify_multiple_map_functions_for_the_same_collection(numberOfDocs: 512)" executed="True" result="Success" success="True" time="0.3460281" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Issues.RavenDB_9620" result="Success" success="True" time="0.016">
            <results>
              <test-case name="FastTests.Issues.RavenDB_9620.CreateServerWithIllegalAppdrivePath" executed="True" result="Success" success="True" time="0.0159846" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Client.Indexing.DebugIndexing" result="Success" success="True" time="0.175">
            <results>
              <test-case name="FastTests.Client.Indexing.DebugIndexing.QueriesRunning" executed="True" result="Success" success="True" time="0.1748775" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Server.Documents.Revisions.RevisionsTests" result="Success" success="True" time="2.834">
            <results>
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.WillNotCreateRevision" executed="True" result="Success" success="True" time="0.1359367" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.DeleteRevisionsBeforeFromConsole(useConsole: False)" executed="True" result="Success" success="True" time="0.2233385" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.DeleteRevisionsBeforeFromConsole(useConsole: True)" executed="True" result="Success" success="True" time="0.2584239" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.WillCreateValidRevisionWhenCompressionDocumentWasSaved" executed="True" result="Success" success="True" time="0.1404524" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.CanGetAllRevisionsFor" executed="True" result="Success" success="True" time="0.1646754" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.WillDeleteOldRevisions" executed="True" result="Success" success="True" time="0.2227626" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.WillDeleteRevisionsIfDeleted_OnlyIfPurgeOnDeleteIsTrue" executed="True" result="Success" success="True" time="0.279233" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.ServerSaveBundlesAfterRestart" executed="True" result="Success" success="True" time="0.294071" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.RevisionsOrder" executed="True" result="Success" success="True" time="0.104348" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.CanGetNullForNotExistsDocument" executed="True" result="Success" success="True" time="0.0863576" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.CanGetRevisionsByChangeVectors" executed="True" result="Success" success="True" time="0.2248548" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.CanCheckIfDocumentHasRevisions" executed="True" result="Success" success="True" time="0.1182245" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.GetRevisionsBinEntries(useSession: False)" executed="True" result="Success" success="True" time="0.1194319" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.GetRevisionsBinEntries(useSession: True)" executed="True" result="Success" success="True" time="0.1282132" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.WillCreateRevision" executed="True" result="Success" success="True" time="0.125689" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.CanExcludeEntitiesFromRevisions" executed="True" result="Success" success="True" time="0.1160025" />
              <test-case name="FastTests.Server.Documents.Revisions.RevisionsTests.GetRevisionsOfNotExistKey" executed="True" result="Success" success="True" time="0.0915302" />
            </results>
          </test-suite>
          <test-suite type="TestCollection" executed="True" name="Test collection for FastTests.Voron.Journal.BasicActions" result="Success" success="True" time="1.988">
            <results>
              <test-case name="FastTests.Voron.Journal.BasicActions.CanUseMultipleLogFiles" executed="True" result="Success" success="True" time="0.6664506" />
              <test-case name="FastTests.Voron.Journal.BasicActions.CanFlushDataFromLogToDataFile" executed="True" result="Success" success="True" time="0.6612894" />
              <test-case name="FastTests.Voron.Journal.BasicActions.ShouldNotReadUncommittedTransaction" executed="True" result="Success" success="True" time="0.6605849" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>