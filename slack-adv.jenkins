import hudson.tasks.test.AbstractTestResultAction
import java.lang.Integer

@NonCPS
def reportTestsIfFailed() {
  AbstractTestResultAction testResultAction =  currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
  if (testResultAction != null) {
    def slackMessage = ''
    def color = ''

    def totalCount = testResultAction.totalCount - (last_test_totals as Integer)
    last_test_totals = testResultAction.totalCount

    if (testResultAction.failCount == 0 && totalCount > 0) {
      return
    }

    if (testResultAction.failCount > 0) {
      color = 'danger'
      slackMessage = "${testResultAction.failCount} test(s) failed (out of ${totalCount})"
    } else {
      color = 'warning'
      slackMessage = "No tests were run"
    }

    slackSend color: color, message: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) [${STAGE_NAME}]: ${slackMessage} (<${env.BUILD_URL}|Open>)"
  }
}

@NonCPS
def reportTotalTestCounts() {
  AbstractTestResultAction testResultAction =  currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
  if (testResultAction != null) {
    def slackMessage = ''
    def color = ''

    if (testResultAction.failCount > 0) {
      color = 'danger'
      slackMessage = "\u274C ${testResultAction.failCount} test(s) failed (out of ${testResultAction.totalCount})"
    } else if (testResultAction.totalCount > 0) {
      color = 'good'
      slackMessage = "\u2714 All tests passed (out of ${testResultAction.totalCount})"
    } else {
      color = 'warning'
      slackMessage = "No tests were run"
    }

    slackSend color: color, message: "${env.JOB_NAME} (#${env.BUILD_NUMBER}): ${slackMessage} (<${env.BUILD_URL}|Open>)"
  }
}

def getStageSummary(Boolean succeeded, String stageName) {
  def resultPrefix = '-'
  if (succeeded) {
    resultPrefix = '+'
  }

  return "${resultPrefix} ${stageName}"
}

pipeline {
  agent {
    label 'windows || windows-slave'
  }

  stages {

    stage ('First test stage') {
      steps {
        script {
          last_test_totals = 0
        }

        catchError {
          // nunit testResultsPattern: 'custom_files/testResultsFailed.xml', failIfNoResults: true
          nunit testResultsPattern: 'custom_files/testResultsSuccess.xml', failIfNoResults: true
        }

        reportTestsIfFailed()
      }
    }

    stage ('Second test stage') {
      steps {
        catchError {
          nunit testResultsPattern: 'custom_files/testResultsFailed.xml', failIfNoResults: true
        }

        // reportTestsIfFailed()
      }
    }

    stage ('Third test stage') {
      steps {
        catchError {
          nunit testResultsPattern: 'custom_files/testResultsSuccess.xml', failIfNoResults: true
        }

        // reportTestsIfFailed()
      }
    }

    stage ('Report results') {
      steps {
        reportTotalTestCounts()
      }
    }

  }
}