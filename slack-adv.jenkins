import hudson.tasks.test.AbstractTestResultAction
import java.lang.Integer

@NonCPS
def reportTestCounts() {
  AbstractTestResultAction testResultAction =  currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
  if (testResultAction != null) {
    def slackMessage = ''
    def color = ''

    def totalCount = testResultAction.totalCount - (last_test_totals as Integer)
    last_test_totals = testResultAction.totalCount

    if (testResultAction.failCount > 0) {
      color = 'warning'
      slackMessage = "${testResultAction.failCount} test(s) failed (out of ${totalCount})"
    } else if (totalCount > 0) {
      color = 'good'
      slackMessage = "All tests passed (out of ${totalCount})"
    } else {
      color = 'danger'
      slackMessage = "No tests were run"
    }

    //slackSend color: color, message: "${env.JOB_NAME} (#${env.BUILD_NUMBER}): ${slackMessage} (<${env.BUILD_URL}|Open>)"

    def slackSummary = ''
  }
}

// def storeStageResult() {
//   script {
//     def resultPrefix = '-'
//     if (stage_success) {
//       resultPrefix = '+'
//     }

//     result_summary = "${result_summary}\n${resultPrefix} ${STAGE_NAME}"
//   }
// }

def getStageSummary(Boolean succeeded, String stageName) {
  def resultPrefix = '-'
  if (succeeded) {
    resultPrefix = '+'
  }

  return "${resultPrefix} ${stageName}"
}

pipeline {
  agent {
    label 'windows || windows-slave'
  }

  environment {
    last_test_totals = 0
  }

  stages {

    stage ('First test stage') {
      steps {
        script {
          stage_success = false
          result_summary = ""
          stage_1_success = false
        }

        echo "[LOG] Stage name: ${STAGE_NAME}"
        catchError {
          // nunit testResultsPattern: 'custom_files/testResultsFailed.xml', failIfNoResults: true
          nunit testResultsPattern: 'custom_files/testResultsSuccess.xml', failIfNoResults: true
          script {
            stage_success = true
            stage_1_success = true
          }
        }
        
        reportTestCounts()

        // script {
        //   storeStageResult()
        // }
      }
    }

    stage ('Second test stage') {
      steps {
        script {
          stage_success = false
          stage_2_success = false
        }

        echo "[LOG] Stage name: ${STAGE_NAME}"
        catchError {
          nunit testResultsPattern: 'custom_files/testResultsFailed.xml', failIfNoResults: true
          script {
            stage_success = true
            stage_2_success = true
          }
        }
        
        reportTestCounts()
        // script {
        //   storeStageResult()
        // }
      }
    }

    stage ('Third test stage') {
      steps {
        script {
          stage_success = false
          stage_3_success = true
        }

        echo "[LOG] Stage name: ${STAGE_NAME}"
        catchError {
          nunit testResultsPattern: 'custom_files/testResultsSuccess.xml', failIfNoResults: true
          script {
            stage_success = true
            stage_3_success = true
          }
        }
        
        reportTestCounts()
        // script {
        //   storeStageResult()
        //   echo "${result_summary}"
        // }
      }
    }

    stage ('Report results') {
      steps {
        script {
          def summary = ''
          def stage_1_summary = getStageSummary(stage_1_success, "First stage")
          def stage_2_summary = getStageSummary(stage_2_success, "Second stage")
          def stage_3_summary = getStageSummary(stage_3_success, "Third stage")
          summary = "${stage_1_summary}\n${stage_2_summary}\n${stage_3_summary}"

          def allSucceeded = stage_1_success && stage_2_success && stage_3_success

          echo '[LOG] SUMMARY:'
          echo "${summary}"

          echo "[LOG] ALL SUCCEEDED: ${allSucceeded}"
        }
      }
    }

  }
}