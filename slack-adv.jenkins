import hudson.tasks.test.AbstractTestResultAction

def sendSlackNotification(String slackMessage) {
  script {
    def color = 'danger'
    echo "[LOG] currentBuild.result: ${currentBuild.result}"
    echo "[LOG] currentBuild.currentResult: ${currentBuild.currentResult}"

    if (currentBuild.currentResult == 'SUCCESS') {
      color = 'good'
    } else if (currentBuild.currentResult == 'FAILURE') {
      color = 'warning'
    }

    slackSend color: color, message: "${env.JOB_NAME} (#${env.BUILD_NUMBER}): ${slackMessage} (<${env.BUILD_URL}|Open>)"
  }
}

@NonCPS
def printTestCounts() {
  AbstractTestResultAction testResultAction =  currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
  if (testResultAction != null) {
    echo "[LOG] Tests: ${testResultAction.failCount} / ${testResultAction.failureDiffString} failures of ${testResultAction.totalCount}.\n\n" 

    if (testResultAction.failCount > 0) {
      echo '[LOG] reporting test failure'
      sendSlackNotification "${testResultAction.failCount} test(s) failed (out of ${testResultAction.totalCount})"
    } else if (testResultAction.totalCount > 0) {
      sendSlackNotification "All tests passed (out of ${testResultAction.totalCount})"
      echo '[LOG] reporting test success'
    }
  }
}

pipeline {
  agent {
    label 'windows || windows-slave'
  }

  stages {

    stage ('Tests') {
      steps {
        catchError {
          // nunit testResultsPattern: 'custom_files/testResultsFailed.xml', failIfNoResults: true
          nunit testResultsPattern: 'custom_files/testResultsSuccess.xml', failIfNoResults: true
        }
        
        printTestCounts()
      }

      // post {
      //   success {
      //     sendSlackNotification 'All tests passed.'
      //   }

      //   failure {
      //     sendSlackNotification 'Tests failed.'
      //   }

      //   aborted {
      //     sendSlackNotification 'Tests were aborted.'
      //   }
      // }
    }

  }
}