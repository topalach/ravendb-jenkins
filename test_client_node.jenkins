def clone(String url, String branch) {
  checkout([$class: 'GitSCM',
    branches: [[name: "*/${branch}"]],
    doGenerateSubmoduleConfigurations: false,
    extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: false, timeout: 30]],
    gitTool: 'Default', 
    submoduleCfg: [],
    userRemoteConfigs: [[url: url]]])
}

pipeline {
  agent {
    label 'windows-agent'
  }

  options {
    timeout(time: 3, unit: 'HOURS')
    timestamps()
  }

  environment {
    repoUrl = 'https://github.com/ravendb/ravendb.git'
    branch = 'v4.0'

    sourceCodeDir = 's'
  }

  stages {

    stage ('Prepare & clone') {
      steps {
        script {
          server_runtime = 'win10-x64'
          server_url = "http://localhost:40440"
          server_build_dir = "${env.WORKSPACE}/publish/Raven.Server"
        }

        dir (env.sourceCodeDir) {
          clone(env.repoUrl, env.branch)
        }
      }
    }

    stage ('Server: build & start') {
      steps {
        dir (env.sourceCodeDir) {
          bat 'dotnet restore'
        }

        dir ("${env.sourceCodeDir}/src/Raven.Server") {
          bat "dotnet publish -c Release -r ${server_runtime} -o ${server_build_dir}"
        }

        dir (server_build_dir) {
          bat "powershell -c 'Start-Process -FilePath \"Raven.Server.exe\" -ArgumentList \"--ServerUrl=${server_url} --RunInMemory=true\" -NoNewWindow'"
          echo "[LOG] Raven.Server.exe was started"
        }
      }
    }

    stage ('Server: stop') {
      steps {
        dir (server_build_dir) {
          bat 'taskkill /IM Raven.Server.exe /F /T /FI \"MEMUSAGE gt 1\"'
          echo "[LOG] Raven.Server.exe was stopped"
        }
      }
    }

  }
}