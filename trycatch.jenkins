import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import java.lang.Integer
// import jenkins.model.CauseOfInterruption

def errorProneBat(String command) {
  script {
    try {
      bat command
    } catch (FlowInterruptedException e) {
      echo "[LOG] encountered ${e.toString()}"
      throw e // rethrowing will cause the pipeline to stop
    } catch (hudson.AbortException ae) {
      echo "[LOG] encountered ${ae.toString()}"
      if (ae.getMessage().find(/script returned exit code -1$/) != null) {
        throw ae
      }
    } catch (Exception e) {
      echo "[LOG] encountered ${e.toString()}"
    }
  }
}

def interruptAwareSh(String command) {
  script {
    try {
      sh command
    } catch (FlowInterruptedException e) {
      echo "[LOG] encountered FlowInterruptedException"
      throw e // rethrowing will cause the pipeline to stop
    } catch (hudson.AbortException ae) {
      echo "[LOG] encountered AbortException"
      echo "[LOG] AbortException message: ${ae.getMessage()}"

      if (ae.getMessage().contains('script returned exit code 143')) {
        echo "[LOG] script was aborted"
        throw ae
      }
    }
  }
}

def retryBat(String command, Integer times) {
  script {
    def i = 0
    def run_again = true

    while (i < times && run_again) {
      i++
      try {
        bat command
        run_again = false
      } catch (FlowInterruptedException e) {
        throw e // rethrowing will cause the pipeline to stop
      } catch (hudson.AbortException ae) {
        if (ae.getMessage().contains('script returned exit code -1')) {
          throw ae
        }
      } catch (Exception e) {
        echo "[LOG] encountered ${e.toString()}"
      }
    }

    if (run_again) {
      error("Bat retry failed.")
    }
  }
}

pipeline {
  agent {
    label 'windows-slave'
    // label 'linux'
  }

  options {
    timestamps()
    timeout(time: 3, unit: 'MINUTES')
  }

  stages {

    stage ('Do Something') {
      steps {
        errorProneBat 'powershell -c "Start-Sleep -s 180"'

        // retryBat('powershell -c "Start-Sleep -s 10"', 5)
        // errorProneBat 'kskljsdlkfsdkjlflkjdsf'
        // errorProneBat 'skjdaskjdkasdaskjd'
        
        // script {
        //   try {
        //     // echo "[LOG] this will definitely fail"
        //     // sh "ckjzxkckzxkczxkckzxckasdasd"

        //     // echo "[LOG] sh sleep for 3 minutes"
        //     // sh "sleep 180"
        //     // sh 'pwsh -c "Start-Sleep -s 180"'

        //     echo "[LOG] going to sleep for a minute"
        //     sleep(time: 5, unit: "MINUTES")
        //     echo "[LOG] resuming after sleep"
        //   } catch (FlowInterruptedException e) {
        //     echo "[LOG] encountered FlowInterruptedException"

        //     throw e
        //     // def user = e.getCauses()[0].getUser()
        //     // echo "[LOG] interruptor: ${user.toString()}"
        //   } catch (hudson.AbortException ae) {
        //     echo "[LOG] encountered AbortException"
        //     echo "[LOG] AbortException message: ${ae.getMessage()}"

        //     if (ae.getMessage().contains('script returned exit code 143')) {
        //       echo "[LOG] script was aborted"
        //       throw ae
        //     }
        //   } catch (Exception e) {
        //     echo "[LOG] encountered some other exception: ${e.toString()}"
        //   }
        // }

        echo "[LOG] resuming after try\\catch"
      }
    }

  }
}